import path from "path";
import { promises as fs } from "fs";


const logo_svg = `
<?xml version="1.0" encoding="UTF-8"?><svg fill="none" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="M27.8387 0H2.16127C0.967636 0 0 0.967636 0 2.16127V27.8387C0 29.0324 0.967636 30 2.16127 30H27.8387C29.0324 30 30 29.0324 30 27.8387V2.16127C30 0.967636 29.0324 0 27.8387 0Z" fill="#26283D"/><path d="m27.778 1.0314h-25.554c-0.65842 0-1.1922 0.53375-1.1922 1.1922v25.554c0 0.6584 0.53375 1.1922 1.1922 1.1922h25.554c0.6584 0 1.1922-0.5338 1.1922-1.1922v-25.554c0-0.65843-0.5338-1.1922-1.1922-1.1922z" fill="url(#b)"/><path d="m17.466 27.336c-0.3665 0-0.7113-0.016-1.0531-0.0464-0.4028-0.0252-0.8024-0.0877-1.1937-0.1869-0.7891-0.2269-1.5269-0.6042-2.1728-1.111-0.9065-0.6947-1.6633-1.5653-2.225-2.5596-0.226-0.3984-0.4346-0.9547-0.98797-2.4423-0.12168-0.3289-0.21294-0.5795-0.28972-0.7808-0.17962-0.4882-0.23901-0.6533-0.38532-0.9706-0.19084-0.4532-0.42515-0.8869-0.69966-1.295-0.33546-0.4667-0.72439-0.8926-1.1589-1.269-0.16658-0.1448-0.24336-0.2129-0.38532-0.323-0.17673-0.1448-0.42009-0.3332-0.88653-0.7417-0.78802-0.6924-1.085-1.014-1.3588-1.3645-0.41279-0.5036-0.7415-1.0705-0.97344-1.6789-0.2029-0.5392-0.32116-1.1065-0.35056-1.6818-0.01498-0.5017 0.03813-1.0032 0.15789-1.4906 0.19202-0.93888 0.5097-1.8476 0.94448-2.7016 0.30097-0.63507 0.6912-1.2238 1.1589-1.7484 0.55402-0.59662 1.1947-1.1064 1.9005-1.5123 0.32368-0.19053 0.66289-0.35335 1.014-0.48672 0.52169-0.18774 1.0723-0.28237 1.6268-0.27958 0.4963 0.00115 0.9903 0.06838 1.4688 0.19991 0.9595 0.23521 1.8169 0.77496 2.4438 1.5384 0.6605 0.817 0.9271 1.844 1.1429 3.2361 0.055 0.36215 0.0768 0.54901 0.0956 0.7127 0.0116 0.11299 0.0246 0.22598 0.0536 0.42588 0.1753 1.1936 0.2622 1.7383 0.4621 2.154 0.2897 0.6084 0.8431 0.9633 1.2067 1.198 0.8923 0.5794 1.8136 0.6576 2.4234 0.7112 0.2405 0.0217 0.5143 0.0333 0.8127 0.0333 0.4461 0 0.817-0.0246 0.9546-0.0347 0.2738-0.0203 0.5026-0.0464 0.7243-0.0725 0.3362-0.0454 0.6748-0.0705 1.014-0.0753 0.4248-3e-4 0.8478 0.0567 1.2573 0.1695 0.8895 0.2051 1.6918 0.6851 2.2931 1.3718 0.6099 0.7243 0.7736 1.4384 0.9793 2.3467 0.1398 0.6066 0.2275 1.224 0.2622 1.8455 0.0347 0.7054 0.0825 1.6687-0.2492 2.8044-0.3198 1.0444-0.8697 2.0037-1.6094 2.8074-0.7758 0.8703-1.7097 1.5856-2.7522 2.1076-0.5916 0.2901-1.2102 0.5216-1.847 0.691-0.8833 0.2472-1.7904 0.4002-2.7059 0.4563-0.3868 0.029-0.7605 0.0435-1.1125 0.0435z" fill="#26283D"/><path d="m17.466 26.226c-0.3332 0-0.6461-0.0131-0.9546-0.0406-0.3421-0.0201-0.6816-0.072-1.014-0.155-0.6501-0.1897-1.2575-0.503-1.789-0.9227-0.7839-0.6036-1.4381-1.3588-1.9237-2.2207-0.1826-0.323-0.3969-0.8967-0.9141-2.2844-0.1217-0.3245-0.2115-0.5708-0.2897-0.7736-0.1796-0.491-0.2535-0.6953-0.4186-1.0531-0.21821-0.5125-0.485-1.0029-0.79676-1.4645-0.38286-0.5327-0.82673-1.0189-1.3226-1.4486-0.19555-0.1781-0.29985-0.2607-0.44471-0.3751-0.17817-0.1449-0.39836-0.3144-0.84307-0.704-0.72429-0.6345-0.98503-0.917-1.2168-1.2139-0.34222-0.4151-0.61517-0.8828-0.80831-1.3849-0.31826-0.8118-0.36901-1.704-0.14486-2.5466 0.17084-0.84587 0.45592-1.6646 0.84742-2.4336 0.25688-0.54711 0.59105-1.0545 0.99227-1.5065 0.47498-0.5142 1.0249-0.95372 1.6311-1.3037 0.26981-0.15873 0.55227-0.29488 0.84452-0.40705 0.39943-0.14399 0.8212-0.21608 1.2458-0.21294 0.399 0.00228 0.7959 0.05683 1.1806 0.16224 0.7333 0.17148 1.3902 0.57854 1.8701 1.1589 0.4346 0.54611 0.6881 1.2805 0.9097 2.7088 0.0522 0.33897 0.071 0.50556 0.0884 0.66635 0.013 0.12313 0.0275 0.24626 0.0594 0.46354 0.1796 1.2183 0.2781 1.8904 0.5606 2.4756 0.4346 0.888 1.1588 1.3631 1.6036 1.6456 1.1212 0.7243 2.251 0.8257 2.9261 0.8865 0.2723 0.0247 0.5794 0.0363 0.9111 0.0363 0.4839 0 0.8866-0.0261 1.0387-0.0377 0.2897-0.0217 0.5446-0.0507 0.7663-0.0768 0.2925-0.0397 0.587-0.0624 0.8821-0.0681 0.3266-4e-4 0.6517 0.0439 0.9662 0.1319 0.3709 0.0999 1.1415 0.3099 1.7383 1.014 0.4346 0.5171 0.5592 1.0589 0.746 1.8831 0.1256 0.5437 0.2046 1.0971 0.2362 1.6543 0.0318 0.6605 0.0724 1.4819-0.2072 2.4379-0.2751 0.8914-0.7474 1.7093-1.3819 2.3931-0.6819 0.7614-1.5023 1.3863-2.4177 1.8411-0.5296 0.2601-1.0837 0.4668-1.6543 0.6171-0.8126 0.226-1.6467 0.3658-2.4886 0.4172-0.3462 0.0333-0.6866 0.0406-1.014 0.0406z" fill="#A59678"/><path d="m9.2115 4.8354c0.82131-0.3013 1.6398-0.09126 1.8831-0.02752 0.5507 0.12671 1.0438 0.43236 1.4023 0.86914 0.323 0.39836 0.5243 1.014 0.7242 2.2786 0.0913 0.58812 0.0739 0.6142 0.1449 1.1226 0.1869 1.269 0.2984 2.028 0.6417 2.7378 0.5403 1.1154 1.4486 1.705 1.9252 2.0107 1.3037 0.8459 2.6074 0.9618 3.3317 1.027 0.6978 0.0516 1.3984 0.0516 2.0961 0 1.1111-0.0826 1.5514-0.2492 2.3105-0.042 0.3346 0.0898 0.8778 0.2462 1.2834 0.7243 0.2897 0.3491 0.3824 0.7243 0.5563 1.4964 0.1141 0.4922 0.1858 0.9933 0.2144 1.4978 0.0318 0.6388 0.0651 1.3298-0.171 2.1395-0.2386 0.7666-0.6483 1.469-1.198 2.0541-0.6032 0.6731-1.3293 1.2247-2.1395 1.6253-0.4808 0.2343-0.9841 0.4192-1.5022 0.5519-0.7544 0.2096-1.5289 0.3387-2.3104 0.3853-0.605 0.051-1.2131 0.051-1.818 0-0.2887-0.0165-0.5753-0.0596-0.8561-0.1289-0.5375-0.1577-1.0389-0.419-1.4761-0.7692-0.6886-0.5283-1.2632-1.1906-1.6891-1.9469-0.1448-0.2607-0.3838-0.8937-0.8561-2.1612-0.4172-1.1198-0.4765-1.3371-0.7243-1.8832-0.2394-0.5624-0.5335-1.0999-0.8778-1.605-0.41816-0.59-0.90437-1.1287-1.4486-1.605-0.465-0.423-0.49397-0.3825-1.3037-1.0908-0.70691-0.62-0.92274-0.8619-1.1024-1.0908-0.28508-0.3424-0.51258-0.7289-0.67359-1.1444-0.12644-0.3392-0.20021-0.6958-0.21873-1.0574-0.00771-0.3301 0.03031-0.6596 0.11299-0.97925 0.15403-0.7695 0.41284-1.5142 0.76919-2.2134 0.22151-0.4733 0.50982-0.91235 0.85611-1.3037 0.22303-0.24043 0.46526-0.46231 0.72429-0.66344 0.21736-0.16892 0.44632-0.32236 0.68517-0.4592 0.22527-0.13444 0.46065-0.25117 0.70401-0.34911z" fill="url(#a)"/><defs><radialgradient id="b" cx="0" cy="0" r="1" gradienttransform="translate(15 15) scale(28.521)" gradientunits="userSpaceOnUse"><stop stop-color="#746B7F"/><stop stop-color="#615B6F" offset=".12"/><stop stop-color="#514C60" offset=".26"/><stop stop-color="#4B475B" offset=".37"/><stop stop-color="#4F4B5F" offset=".44"/><stop stop-color="#5A566C" offset=".51"/><stop stop-color="#6D6881" offset=".59"/><stop stop-color="#87829E" offset=".67"/><stop stop-color="#A9A2C3" offset=".74"/><stop stop-color="#BCB5D9" offset=".78"/></radialgradient><lineargradient id="a" x1="5.54949" x2="23.9884" y1="7.79624" y2="23.7393" gradientunits="userSpaceOnUse"><stop stop-color="#448491" offset=".05"/><stop stop-color="#4A7986" offset=".15"/><stop stop-color="#506E7B" offset=".33"/><stop stop-color="#526A77" offset=".52"/><stop stop-color="#56707C" offset=".6"/><stop stop-color="#607F8B" offset=".7"/><stop stop-color="#7099A3" offset=".82"/><stop stop-color="#87BDC4" offset=".94"/><stop stop-color="#94D1D6" offset="1"/></lineargradient></defs></svg> 
`;

export default async function handler(req, res) {
  const { slug } = req.query;
  const normalizedSlug = normalizeName(slug);
  const jsonDirectory = path.join(process.cwd(), 'public');
  const fileContents = await fs.readFile(jsonDirectory + '/index.json', 'utf8');
  const plugins = JSON.parse(fileContents)
  if (plugins[normalizedSlug]) {
    const shield_schema = {
        "color": "#0074B8",
        "label": "napari hub",
        "logoSvg": logo_svg,
        "message": slug,
        "schemaVersion": 1,
        "style": "flat-square"
    }
    return res.status(200).json(shield_schema);
  }
  else {
    return res.status(404).json('Plugin not found.')
  }
}

function normalizeName(name) {
  return name.replace(/[-_.]+/g, "-").toLowerCase();
}
