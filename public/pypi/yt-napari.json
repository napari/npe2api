{
  "info": {
    "author": "Chris Havlin",
    "author_email": "chris.havlin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Framework :: napari",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Testing"
    ],
    "description": "# yt-napari\n\n[![License](https://img.shields.io/pypi/l/yt-napari.svg?color=green)](https://github.com/data-exp-lab/yt-napari/raw/main/LICENSE)\n[![PyPI](https://img.shields.io/pypi/v/yt-napari.svg?color=green)](https://pypi.org/project/yt-napari)\n[![Python Version](https://img.shields.io/pypi/pyversions/yt-napari.svg?color=green)](https://python.org)\n[![tests](https://github.com/data-exp-lab/yt-napari/workflows/tests/badge.svg)](https://github.com/data-exp-lab/yt-napari/actions)\n[![codecov](https://codecov.io/gh/data-exp-lab/yt-napari/branch/main/graph/badge.svg)](https://codecov.io/gh/data-exp-lab/yt-napari)\n[![napari hub](https://img.shields.io/endpoint?url=https://api.napari-hub.org/shields/yt-napari)](https://napari-hub.org/plugins/yt-napari)\n[![Documentation Status](https://readthedocs.org/projects/yt-napari/badge/?version=latest)](https://yt-napari.readthedocs.io/en/latest/?badge=latest)\n\nA [napari] plugin for loading data from [yt].\n\nThis readme provides a brief overview including:\n\n1. [Installation](#Installation)\n2. [Quick Start](#Quick-Start)\n3. [Contributing](#Contributing)\n\nFull documentation is available at [yt-napari.readthedocs.io].\n\n## Installation\n\n### 1. (optional) install `yt` and `napari`\n\nIf you skip this step, the installation in the following section will only install the minimal package requirements for `yt` or `napari`, in which case you will likely need to manually install some packages. So if you are new to either package, or if you are installing in a clean environment, it may be simpler to  install these packages first.\n\nFor `napari`,\n\n    pip install napari[all]\n\nwill install `napari` with the default `Qt` backend (see [here](https://napari.org/tutorials/fundamentals/installation#choosing-a-different-qt-backend) for how to choose between `PyQt5` or `PySide2`).\n\nFor `yt`, you will need `yt>=4.0.1` and any of the optional dependencies for your particular workflow. If you know that you'll need more than the base `yt` install, you can install the full suite of dependent packages with\n\n    pip install yt[full]\n\nSee the [`yt` documentation](https://yt-project.org/doc/installing.html#leveraging-optional-yt-runtime-dependencies) for more information. If you're not sure which packages you'll need but don't want the full yt installation, you can proceed to the next step and then install any packages as needed (you will receive error messages when a required package is missing).\n\n### 2. install `yt-napari`\n\nYou can install the `yt-napari` plugin with:\n\n    pip install yt-napari\n\nIf you are missing either `yt` or `napari` (or they need to be updated), the above installation will fetch and run a minimal installation for both.\n\nTo install the latest development version of the plugin instead, use:\n\n    pip install git+https://github.com/data-exp-lab/yt-napari.git\n\n## Quick Start\n\nAfter [installation](#Installation), there are three modes of using `yt-napari`:\n\n1. jupyter notebook interaction ([jump down](#jupyter-notebook-interaction))\n2. loading a json file from the napari gui ([jump down](#loading-a-json-file-from-the-napari-gui))\n3. napari widget plugins ([jump down](#napari-widget-plugins))\n\n### jupyter notebook interaction\n\n`yt-napari` provides a helper class, `yt_napari.viewer.Scene` that assists in properly aligning new yt selections in the napari viewer when working in a Jupyter notebook.\n\n```python\nimport napari\nimport yt\nfrom yt_napari.viewer import Scene\nfrom napari.utils import nbscreenshot\n\nviewer = napari.Viewer()\nds = yt.load(\"IsolatedGalaxy/galaxy0030/galaxy0030\")\nyt_scene = Scene()\n\nleft_edge = ds.domain_center - ds.arr([40, 40, 40], 'kpc')\nright_edge = ds.domain_center + ds.arr([40, 40, 40], 'kpc')\nres = (600, 600, 600)\n\nyt_scene.add_to_viewer(viewer,\n                       ds,\n                       (\"enzo\", \"Temperature\"),\n                       left_edge = left_edge,\n                       right_edge = right_edge,\n                       resolution = res)\n\nyt_scene.add_to_viewer(viewer,\n                       ds,\n                       (\"enzo\", \"Density\"),\n                       left_edge = left_edge,\n                       right_edge = right_edge,\n                       resolution = res)\n\nnbscreenshot(viewer)\n```\n\n ![Loading a subset of a yt dataset in napari from a Jupyter notebook](./assets/images/readme_ex_001.png)\n\n`yt_scene.add_to_viewer` accepts any of the keyword arguments allowed by `viewer.add_image`. See the full documentation (!!!NEED LINK!!!) for more examples, including additional helper methods for linking layer appearance.\n\n### loading a selection from a yt dataset interactively\n\n`yt-napari` provides a two ways to sample a yt dataset and load in an image layer into a Napari viewer: the yt Reader plugin and json file specification.\n\n#### using the yt Reader plugin\n\nTo use the yt Reader plugin, click on `Plugins -> yt-napari: yt Reader`. Select a file, specify a field type and field, set the region to sample and then simply click \"Load\":\n\n![Loading a subset of a yt dataset from the napari viewer](./assets/images/readme_ex_003_gui_reader.gif)\n\nTo load a different field or section, adjust the values and click \"Load\" again.\n\n#### using a json file and schema\n\n`yt-napari` also provides the ability to load json that contain specifications for loading a file. Properly formatted files can be loaded from the napari GUI as you would load any image file (`File->Open`). The json file describes the selection process for a dataset as described by a json-schema. The following json file results in similar layers as the above examples:\n\n\n```json\n{\"$schema\": \"https://raw.githubusercontent.com/data-exp-lab/yt-napari/main/src/yt_napari/schemas/yt-napari_0.0.1.json\",\n \"data\": [{\"filename\": \"IsolatedGalaxy/galaxy0030/galaxy0030\",\n           \"selections\": [{\n                            \"fields\": [{\"field_name\": \"Temperature\", \"field_type\": \"enzo\", \"take_log\": true},\n                                       {\"field_name\": \"Density\", \"field_type\": \"enzo\", \"take_log\": true}],\n                            \"left_edge\": [460.0, 460.0, 460.0],\n                            \"right_edge\": [560.0, 560.0, 560.0],\n                            \"resolution\": [600, 600, 600]\n                          }],\n           \"edge_units\": \"kpc\"\n         }]\n}\n```\n\nTo help in filling out a json file, it is recommended that you use an editor capable of parsing a json schema and displaying hints. For example, in vscode, you will see field suggestions after specifying the `yt-napari` schema:\n\n![interactive json completion for yt-napari](./assets/images/readme_ex_002_json.png)\n\nSee the full documentation at [yt-napari.readthedocs.io] for a complete specification.\n\n\n## Contributing\n\nContributions are very welcome! Development follows a fork and pull request workflow. To get started, you'll need a development installation and a testing environment.\n\n### development environment\n\nTo start developing, fork the repository and clone your fork to get a local copy. You can then install in development mode with\n\n    pip install -e .\n\n### tests and style checks\n\nBoth bug fixes and new features will need to pass the existing test suite and style checks. While both will be run automatically when you submit a pull request, it is helpful to run the test suites locally and run style checks throughout development. For testing, you can use [tox].\n\n    pip install tox\n\nAnd then from the top level of the `yt-napari` directory, run\n\n    tox .\n\nTox will then run a series of tests in isolated environments. In addition to checking the terminal output for test results, the tox run will generate a test coverage report: a `coverage.xml` file and a `htmlcov` folder -- to view the results, open `htmlcov/index.html` in a browser.\n\nFor style checks, you can use [pre-commit](https://pre-commit.com/) to run checks as you develop. To set up `pre-commit`:\n\n    pip install pre-commit\n    pre-commit install\n\nafter which, every time you run `git commit`, some automatic style adjustments and checks will run. The same style checks will run when you submit a pull request, but it's often easier to catch them early.\n\n### building documentation locally\n\nDocumentation can be built using `sphinx` in two steps. First, update the api mapping with\n\n    sphinx-apidoc -f -o docs/source src/yt_napari/\n\nThis will update the `rst` files in `docs/source/` with the latest docstrings in `yt_napari`. Next, build the html documentation with\n\n    make html\n\n\n### updating the pydantic models and schema\n\nUpdates to the pydantic models should be accompanied by updates to the json schema. There are a number of utilities to help automate the management of schema.\n\nThe schema versioning follows a `major.minor.micro` versioning pattern and yt-napari schema are stored in `src/yt_napari/schemas/`. When changing the model, you can store a new schema from a python shell with:\n\n\n    from yt_napari._data_model import _store_schema\n    _store_schema()\n\nAnd the current version of the primary pydantic model, `yt_napari._data_model.InputModel`, will be exported to a new json schema file. By default, the micro version number will be incremented. To increment the major or minor version number, you can supply any of the keyword arguments described in the `write_new_schema` method of the `yt_napari.schemas._mananager.Manager` class.\n\nAfter updating or adding a new schema, the docs also need to be updated. To do that, run\n\n    python repo_utilities/update_schema_docs.py\n    make clean && make html\n\n## License\n\nDistributed under the terms of the [BSD-3] license,\n\"yt-napari\" is free and open source software\n\n## Issues\n\nIf you encounter any problems, please [file an issue] along with a detailed description.\n\n----------------------------------\n\nThis [napari] plugin was generated with [Cookiecutter] using [@napari]'s [cookiecutter-napari-plugin] template.\n\n<!--\nDon't miss the full getting started guide to set up your new package:\nhttps://github.com/napari/cookiecutter-napari-plugin#getting-started\n\nand review the napari docs for plugin developers:\nhttps://napari.org/plugins/stable/index.html\n-->\n\n[napari]: https://github.com/napari/napari\n[Cookiecutter]: https://github.com/audreyr/cookiecutter\n[@napari]: https://github.com/napari\n[MIT]: http://opensource.org/licenses/MIT\n[BSD-3]: http://opensource.org/licenses/BSD-3-Clause\n[GNU GPL v3.0]: http://www.gnu.org/licenses/gpl-3.0.txt\n[GNU LGPL v3.0]: http://www.gnu.org/licenses/lgpl-3.0.txt\n[Apache Software License 2.0]: http://www.apache.org/licenses/LICENSE-2.0\n[Mozilla Public License 2.0]: https://www.mozilla.org/media/MPL/2.0/index.txt\n[cookiecutter-napari-plugin]: https://github.com/napari/cookiecutter-napari-plugin\n[yt-napari.readthedocs.io]: https://yt-napari.readthedocs.io/\n\n[file an issue]: https://github.com/data-exp-lab/yt-napari/issues\n\n[napari]: https://github.com/napari/napari\n[tox]: https://tox.readthedocs.io/en/latest/\n[pip]: https://pypi.org/project/pip/\n[PyPI]: https://pypi.org/\n[yt]: https://yt-project.org/\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/data-exp-lab/yt-napari",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yt-napari",
    "package_url": "https://pypi.org/project/yt-napari/",
    "platform": null,
    "project_url": "https://pypi.org/project/yt-napari/",
    "project_urls": {
      "Bug Tracker": "https://github.com/data-exp-lab/yt-napari/issues",
      "Documentation": "https://github.com/data-exp-lab/yt-napari#README.md",
      "Homepage": "https://github.com/data-exp-lab/yt-napari",
      "Source Code": "https://github.com/data-exp-lab/yt-napari",
      "User Support": "https://github.com/data-exp-lab/yt-napari/issues"
    },
    "release_url": "https://pypi.org/project/yt-napari/0.0.1/",
    "requires_dist": [
      "magicgui (>=0.4.0)",
      "napari (>=0.4.13)",
      "npe2",
      "numpy",
      "pydantic",
      "yt (>=4.0.1)"
    ],
    "requires_python": ">=3.7",
    "summary": "A napari plugin for loading data from yt",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13693435,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ff523066c7f75d3465d2090dc547edcc",
          "sha256": "8913ee4851b062d78d89741a81d12ff987f904b79502be7ebe777894dc0d5d27"
        },
        "downloads": -1,
        "filename": "yt_napari-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ff523066c7f75d3465d2090dc547edcc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 32208,
        "upload_time": "2022-05-02T22:27:00",
        "upload_time_iso_8601": "2022-05-02T22:27:00.024562Z",
        "url": "https://files.pythonhosted.org/packages/43/ed/a9830681f1d1c7360cc2983a2e785d10c69ba5f6403e882fde7046bbe127/yt_napari-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "7b6f76439aee1215429898c9ab47d8c7",
          "sha256": "0aed07262cdbb55566b30ff0bcaf2f4a0340402b94515796a7fff6a97670c86b"
        },
        "downloads": -1,
        "filename": "yt_napari-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7b6f76439aee1215429898c9ab47d8c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 34949,
        "upload_time": "2022-05-02T22:27:01",
        "upload_time_iso_8601": "2022-05-02T22:27:01.583943Z",
        "url": "https://files.pythonhosted.org/packages/2e/c2/8f9872fbd86680adbca27ec2be540654dba7cfa4b7a42042843b973a1bfa/yt_napari-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "ff523066c7f75d3465d2090dc547edcc",
        "sha256": "8913ee4851b062d78d89741a81d12ff987f904b79502be7ebe777894dc0d5d27"
      },
      "downloads": -1,
      "filename": "yt_napari-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ff523066c7f75d3465d2090dc547edcc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 32208,
      "upload_time": "2022-05-02T22:27:00",
      "upload_time_iso_8601": "2022-05-02T22:27:00.024562Z",
      "url": "https://files.pythonhosted.org/packages/43/ed/a9830681f1d1c7360cc2983a2e785d10c69ba5f6403e882fde7046bbe127/yt_napari-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "7b6f76439aee1215429898c9ab47d8c7",
        "sha256": "0aed07262cdbb55566b30ff0bcaf2f4a0340402b94515796a7fff6a97670c86b"
      },
      "downloads": -1,
      "filename": "yt_napari-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7b6f76439aee1215429898c9ab47d8c7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 34949,
      "upload_time": "2022-05-02T22:27:01",
      "upload_time_iso_8601": "2022-05-02T22:27:01.583943Z",
      "url": "https://files.pythonhosted.org/packages/2e/c2/8f9872fbd86680adbca27ec2be540654dba7cfa4b7a42042843b973a1bfa/yt_napari-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}