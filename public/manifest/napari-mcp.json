{
  "name": "napari-mcp",
  "display_name": "Napari MCP",
  "visibility": "public",
  "icon": "",
  "categories": [],
  "schema_version": "0.2.1",
  "on_activate": null,
  "on_deactivate": null,
  "contributions": {
    "commands": [
      {
        "id": "napari-mcp.mcp_control_widget",
        "title": "MCP Server Control",
        "python_name": "napari_mcp.widget:MCPControlWidget",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      }
    ],
    "readers": null,
    "writers": null,
    "widgets": [
      {
        "command": "napari-mcp.mcp_control_widget",
        "display_name": "MCP Server Control",
        "autogenerate": false
      }
    ],
    "sample_data": null,
    "themes": null,
    "menus": {},
    "submenus": null,
    "keybindings": null,
    "configuration": []
  },
  "package_metadata": {
    "metadata_version": "2.4",
    "name": "napari-mcp",
    "version": "0.0.3",
    "dynamic": [
      "license-file"
    ],
    "platform": null,
    "supported_platform": null,
    "summary": "MCP server for remote control of napari viewers via Model Context Protocol",
    "description": "# Napari MCP Server\n\n[![Tests](https://github.com/royerlab/napari-mcp/workflows/Tests/badge.svg)](https://github.com/royerlab/napari-mcp/actions)\n[![codecov](https://codecov.io/gh/royerlab/napari-mcp/graph/badge.svg?token=E1WY58V877)](https://codecov.io/gh/royerlab/napari-mcp)\n[![PyPI version](https://badge.fury.io/py/napari-mcp.svg)](https://badge.fury.io/py/napari-mcp)\n[![Python 3.10+](https://img.shields.io/badge/python-3.10+-blue.svg)](https://www.python.org/downloads/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nMCP server for remote control of napari viewers via Model Context Protocol (MCP). Perfect for AI-assisted analysis with Claude Desktop.\n\n## \ud83d\ude80 Quick Start (Two Setup Methods)\n\n### Method 1: Add MCP JSON Configuration (Recommended)\n\nAdd this to your MCP client configuration. Clients will auto-launch the server.\n\n```json\n{\n  \"mcpServers\": {\n    \"napari\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"--with\", \"napari-mcp\", \"napari-mcp\"]\n    }\n  }\n}\n```\n\nSee the MCP JSON format standard: [MCP JSON Configuration](https://gofastmcp.com/integrations/mcp-json-configuration).\n\n### Method 2: Napari Plugin Bridge (External Viewer)\n\n1. Install: `pip install napari-mcp`\n2. Open napari \u2192 Plugins \u2192 MCP Server Control\n3. Click \u201cStart Server\u201d (default port 9999)\n4. Keep the same MCP JSON config as above so your AI app auto-starts and proxies to this external viewer\n\n### Development Install\n```bash\n# Clone and install\ngit clone https://github.com/royerlab/napari-mcp.git\ncd napari-mcp\nuv pip install -e .\n```\n\n**Claude Desktop config:** use the MCP JSON in Method 1 above.\n\n**Why uv run?**\n- \u2705 **Zero install** - No virtualenv or pip install required\n- \u2705 **Always up-to-date** - Pulls the latest published version\n- \u2705 **Reproducible** - uv caches and pins environments per command\n\n## \ud83e\udd16 Multi-LLM Support\n\nWorks with multiple AI assistants and IDEs:\n\n| Application | Status | Setup Method |\n|-------------|--------|--------------|\n| **Claude Desktop** | \u2705 Full Support | Manual config (recommended) |\n| **Claude Code** | \u2705 Full Support | `fastmcp install claude-code` |\n| **Cursor** | \u2705 Full Support | `fastmcp install cursor` |\n| **ChatGPT** | \ud83d\udfe1 Limited | Remote deployment only |\n\n**\u2192 See [LLM_INTEGRATIONS.md](LLM_INTEGRATIONS.md) for complete setup guides**\n\n## \ud83d\udd27 Alternative Installation Methods\n\n### Traditional Package Installation\n\n```bash\n# Clone and install\ngit clone https://github.com/royerlab/napari-mcp.git\ncd napari-mcp\npip install -e .\n\n# Run (optional for debugging only)\nnapari-mcp --help\n```\n\n\n\n### Development Installation\n\n```bash\n# With uv (recommended for development)\nuv pip install -e \".[test,dev]\"\n\n# With pip\npip install -e \".[test,dev]\"\n```\n\n**Requirements:**\n- Python 3.10+\n- napari 0.5.5+\n- Qt Backend (PyQt6 installed automatically)\n\n## \ud83d\udee0 Available MCP Tools\n\n### Session Information\n- `session_information()` - Get comprehensive session info including viewer state, layers, system details\n- `detect_viewers()` - Detect available local/external viewers\n\n### Layer Management\n- `list_layers()` - Get all layers and their properties\n- `add_image(path, name?, colormap?, blending?, channel_axis?)` - Add image layer from file\n- `add_labels(path, name?)` - Add segmentation labels from file\n- `add_points(points, name?, size?)` - Add point annotations\n- `remove_layer(name)` - Remove layer by name\n- `set_layer_properties(...)` - Modify layer visibility, opacity, colormap, etc.\n- `reorder_layer(name, index?|before?|after?)` - Change layer order\n- `set_active_layer(name)` - Set selected layer\n\n### Viewer Controls\n- `init_viewer(title?, width?, height?)` - Create/configure viewer and start GUI\n- `close_viewer()` - Close viewer window (also stops GUI)\n- `reset_view()` - Reset camera to fit all data\n- `set_camera(center?, zoom?, angle?)` - Position camera\n- `set_ndisplay(2|3)` - Switch between 2D/3D display\n- `set_dims_current_step(axis, value)` - Navigate dimensions (time, Z-stack)\n- `set_grid(enabled?)` - Enable/disable grid view\n\n### Utilities\n- `screenshot(canvas_only?)` - Capture PNG image as base64\n- `execute_code(code)` - Run Python with access to viewer, napari, numpy\n- `install_packages(packages, ...)` - Install Python packages dynamically\n- `read_output(output_id, start?, end?)` - Retrieve full/stdout/stderr from previous calls\n\n## \u26a0\ufe0f **IMPORTANT SECURITY WARNING**\n\n**This server includes powerful tools that allow arbitrary code execution:**\n\n- **`execute_code()`** - Runs any Python code in the server environment\n- **`install_packages()`** - Installs any Python package via pip\n\n**Security Implications:**\n- \u2705 **Safe for local development** with trusted AI assistants like Claude\n- \u274c **NEVER expose to untrusted networks** or public internet\n- \u274c **Do not use in production environments** without proper sandboxing\n- \u274c **Can access your filesystem, network, and install malware**\n\n**Recommended Usage:**\n- Use only on `localhost` connections\n- Run in isolated virtual environments\n- Only use with trusted AI assistants\n\n## \ud83d\udcd6 Usage Examples\n\n### Basic Layer Operations\n\n**Add and manipulate images:**\n```\nAsk Claude: \"Add a sample image to napari and set its colormap to 'viridis'\"\n```\n\n**Work with annotations:**\n```\nAsk Claude: \"Create some point annotations at coordinates [[100,100], [200,200]] and make them size 10\"\n```\n\n### Advanced Analysis\n\n**Execute custom code:**\n```\nAsk Claude: \"Execute this code to create a synthetic image:\nimport numpy as np\ndata = np.random.random((512, 512))\nviewer.add_image(data, name='random_noise')\"\n```\n\n**Install packages on-demand:**\n```\nAsk Claude: \"Install scipy and create a Gaussian filtered version of the current image\"\n```\n\n### View Management\n\n**Control the camera:**\n```\nAsk Claude: \"Reset the view, then zoom to 2x and center on coordinates [256, 256]\"\n```\n\n**Switch display modes:**\n```\nAsk Claude: \"Switch to 3D display mode and take a screenshot\"\n```\n\n## \ud83e\uddea Testing\n\n```bash\n# Fast suite (skips GUI)\npytest -q -m \"not realgui\"\n\n# Full suite with coverage (skips GUI)\npytest --cov=src --cov-report=html tests/ -m \"not realgui\"\n\n# Include GUI tests (requires a display)\npytest -m realgui\n```\n\n## \ud83e\udd1d Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Make your changes with tests\n4. Run pre-commit hooks: `pre-commit run --all-files`\n5. Commit your changes (`git commit -m 'Add amazing feature'`)\n6. Push to the branch (`git push origin feature/amazing-feature`)\n7. Open a Pull Request\n\n**Development setup:**\n```bash\ngit clone https://github.com/royerlab/napari-mcp.git\ncd napari-mcp\nuv pip install -e \".[test,dev]\"\npre-commit install\n```\n\n## \ud83d\udccb Architecture\n\nThe server architecture consists of:\n\n- **FastMCP Server**: Handles MCP protocol communication\n- **Napari Integration**: Manages viewer lifecycle and operations\n- **Qt Event Loop**: Asynchronous GUI event processing\n- **Tool Layer**: Exposes napari functionality as MCP tools\n- **External Bridge (optional)**: Auto-detects and proxies to an existing napari viewer started from the plugin widget\n\nKey design decisions:\n- **Thread-safe**: All napari operations are serialized through locks\n- **Non-blocking**: Qt event loop runs asynchronously\n- **Stateful**: Maintains viewer state across tool calls\n- **Extensible**: Easy to add new tools and functionality\n\n## \ud83d\udcda Resources\n\n- **[Quick Start](docs/getting-started/quickstart.md)** - Get running in 2 minutes\n- **[LLM_INTEGRATIONS.md](LLM_INTEGRATIONS.md)** - Complete guide for Claude Desktop, Claude Code, Cursor, ChatGPT\n- **[Model Context Protocol](https://modelcontextprotocol.io/)** - MCP specification\n- **[FastMCP](https://github.com/jlowin/fastmcp)** - Python MCP framework\n- **[napari](https://napari.org/)** - Multi-dimensional image viewer\n- **[Claude Desktop](https://claude.ai/download)** - AI assistant with MCP support\n\n## \ud83d\udcc4 License\n\nMIT License - see [LICENSE](LICENSE) file for details.\n\n## \ud83d\ude4f Acknowledgments\n\n- [napari team](https://napari.org/) for the excellent imaging platform\n- [FastMCP](https://github.com/jlowin/fastmcp) for the MCP framework\n- [Anthropic](https://www.anthropic.com/) for Claude and MCP development\n- [astral-sh](https://astral.sh/) for uv dependency management\n\n---\n\n**Built with \u2764\ufe0f for the microscopy and AI communities**\n",
    "description_content_type": "text/markdown",
    "keywords": "napari,mcp,microscopy,image-analysis,ai,claude",
    "home_page": null,
    "download_url": null,
    "author": null,
    "author_email": "Ilan Theodoro <ilan.silva@czbiohub.org>",
    "maintainer": null,
    "maintainer_email": "Ilan Theodoro <ilan.silva@czbiohub.org>",
    "license": "MIT",
    "classifier": [
      "Development Status :: 3 - Alpha",
      "Framework :: napari",
      "Intended Audience :: Science/Research",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.12",
      "Programming Language :: Python :: 3.13",
      "Topic :: Scientific/Engineering :: Image Processing",
      "Topic :: Scientific/Engineering :: Visualization",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "requires_dist": [
      "fastmcp>=2.10.3",
      "napari>=0.5.5",
      "pyqt6>=6.5.0",
      "qtpy>=2.4.1",
      "Pillow>=10.3.0",
      "imageio>=2.34.0",
      "numpy>=1.26.0",
      "pytest>=8.4.0; extra == \"test\"",
      "pytest-asyncio>=0.23.0; extra == \"test\"",
      "pytest-cov>=4.0.0; extra == \"test\"",
      "pytest-qt>=4.0.0; extra == \"test\"",
      "pytest-xdist>=3.5.0; extra == \"test\"",
      "pytest-timeout>=2.2.0; extra == \"test\"",
      "pytest-benchmark>=4.0.0; extra == \"test\"",
      "pytest-mock>=3.12.0; extra == \"test\"",
      "pytest-random-order>=1.1.0; extra == \"test\"",
      "pytest-forked>=1.6.0; extra == \"test\"",
      "hypothesis>=6.100.0; extra == \"test\"",
      "napari[pyqt6,testing]; extra == \"test\"",
      "tox; extra == \"test\"",
      "ruff>=0.12.10; extra == \"dev\"",
      "mypy>=1.17.0; extra == \"dev\"",
      "types-Pillow>=10.0.0; extra == \"dev\"",
      "pre-commit>=4.3.0; extra == \"dev\"",
      "bandit>=1.8.6; extra == \"dev\"",
      "black>=24.0.0; extra == \"dev\"",
      "napari-mcp[dev,test]; extra == \"all\""
    ],
    "requires_python": ">=3.10",
    "requires_external": null,
    "project_url": [
      "Homepage, https://github.com/royerlab/napari-mcp",
      "Repository, https://github.com/royerlab/napari-mcp",
      "Documentation, https://github.com/royerlab/napari-mcp#readme",
      "Bug Tracker, https://github.com/royerlab/napari-mcp/issues",
      "Changelog, https://github.com/royerlab/napari-mcp/blob/main/CHANGELOG.md"
    ],
    "provides_extra": [
      "test",
      "dev",
      "all"
    ],
    "provides_dist": null,
    "obsoletes_dist": null
  },
  "npe1_shim": false
}