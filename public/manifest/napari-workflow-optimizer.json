{
  "name": "napari-workflow-optimizer",
  "display_name": "napari-workflow-optimizer",
  "visibility": "public",
  "icon": "",
  "categories": [],
  "schema_version": "0.2.1",
  "on_activate": null,
  "on_deactivate": null,
  "contributions": {
    "commands": [
      {
        "id": "napari-workflow-optimizer.WorkflowOptimizer",
        "title": "WorkflowOptimizer",
        "python_name": "napari_workflow_optimizer.gui._dock_widget:WorkflowOptimizer",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      }
    ],
    "readers": null,
    "writers": null,
    "widgets": [
      {
        "command": "napari-workflow-optimizer.WorkflowOptimizer",
        "display_name": "WorkflowOptimizer",
        "autogenerate": false
      }
    ],
    "sample_data": null,
    "themes": null,
    "menus": {},
    "submenus": null,
    "keybindings": null,
    "configuration": []
  },
  "package_metadata": {
    "metadata_version": "2.1",
    "name": "napari-workflow-optimizer",
    "version": "0.1.4",
    "dynamic": null,
    "platform": [
      "UNKNOWN"
    ],
    "supported_platform": null,
    "summary": "Optimize image processing workflows in napari for segmentation quality",
    "description": "# napari-workflow-optimizer\n\n[![License](https://img.shields.io/pypi/l/napari-workflow-optimizer.svg?color=green)](https://github.com/haesleinhuepf/napari-workflow-optimizer/raw/main/LICENSE)\n[![PyPI](https://img.shields.io/pypi/v/napari-workflow-optimizer.svg?color=green)](https://pypi.org/project/napari-workflow-optimizer)\n[![Python Version](https://img.shields.io/pypi/pyversions/napari-workflow-optimizer.svg?color=green)](https://python.org)\n[![tests](https://github.com/haesleinhuepf/napari-workflow-optimizer/workflows/tests/badge.svg)](https://github.com/haesleinhuepf/napari-workflow-optimizer/actions)\n[![codecov](https://codecov.io/gh/haesleinhuepf/napari-workflow-optimizer/branch/main/graph/badge.svg)](https://codecov.io/gh/haesleinhuepf/napari-workflow-optimizer)\n[![Development Status](https://img.shields.io/pypi/status/napari-workflow-optimizer.svg)](https://en.wikipedia.org/wiki/Software_release_life_cycle#Alpha)\n[![napari hub](https://img.shields.io/endpoint?url=https://api.napari-hub.org/shields/napari-workflow-optimizer)](https://napari-hub.org/plugins/napari-workflow-optimizer)\n\nOptimize image processing workflows in napari for segmentation quality\n\n![img.png](https://github.com/haesleinhuepf/napari-workflow-optimizer/raw/main/docs/napari-workflow-optimizer.gif)\n\n## Usage\n\nThe starting point for workflow optimization is a workflow and some reference (\"ground truth\") labels image. \nThe label image can be a sparse annotation, which means only some objects and also parts of objets are annotated (see [hints](https://github.com/haesleinhuepf/napari-workflow-optimizer#optimization-hints)). \nThese datasets should be ready. You can reproduce the following procedure by downloading an \n[examle raw image](https://github.com/haesleinhuepf/napari-workflow-optimizer/blob/main/demo/membranes_2d.tif) (derived from the \n[scikit-image cells3d example data set](https://scikit-image.org/docs/dev/api/skimage.data.html#skimage.data.cells3d)) and a corresponding \n[sparse annotation label image](https://github.com/haesleinhuepf/napari-workflow-optimizer/blob/main/demo/membranes_2d_sparse_labels.tif).\nFor reproducing the following procedure, also follow the [installation instructions](https://github.com/haesleinhuepf/napari-workflow-optimizer#optimization-hints) below.\nThe whole procedure is [also shown in this video](https://github.com/haesleinhuepf/napari-workflow-optimizer/raw/main/docs/napari-workflow-optimizer.mp4), an extended version of the trailer above.\n\n### Step 0: Loading data and setting up the workflow\n\nLoad the \"membranes_2d.tif\" data set, e.g. by drag&drop on napari and start the Assistant from the `Tools > Utilities > Assistant (clEsperanto)` menu.\n\n![](https://github.com/haesleinhuepf/napari-workflow-optimizer/raw/main/docs/screenshot1_start_raw.png)\n\nClick the `Label` button and select as operation \"Seeded watershed using local minima as seeds and an intensity threshold (nsbatwm)\".\n\n![](https://github.com/haesleinhuepf/napari-workflow-optimizer/raw/main/docs/screenshot2_labeled_beginning.png)\n\nDraw an annotation in a new labels layer or load the example spare annotation \"membranes_2d_sparse_labels.tif\". \n\n![](https://github.com/haesleinhuepf/napari-workflow-optimizer/raw/main/docs/screenshot4_loaded_manual_annotation.png)\n\nIn case the image is not displayed as label image, convert it to a label image by right-clicking on the entry in the layers list:\n\n![](https://github.com/haesleinhuepf/napari-workflow-optimizer/raw/main/docs/screenshot3_load_manual_annotation.png)\n\n### Step 1: The Workflow Optimizer\n\nStart the Workflow Optimizer from the `Tools > Utilities > Workflow optimizer (Labels)` menu. \nConfigure the target layer, showing the label image that should be optimized.\nSelect the manual annotation as reference layer for the optimization. \nConsider increasing the number of iterations. This number depends on your segmenation problem. \nIn the present example, 100 iterations should be enough.\n\n![](https://github.com/haesleinhuepf/napari-workflow-optimizer/raw/main/docs/screenshot5_start_optimization.png)\n\nThe optimizer will plot quality over the number of iterations to show the progress of optimization. \nTo determine the quality, the optimizer will measure the maximum overlap ([Jaccard index](https://en.wikipedia.org/wiki/Jaccard_index)) \nof any labeled object over the manually annotated objects and calculate the mean of this value over all annotated objects.\nAfter a moment, optimization will finish and update the labeled image. \nIf your starting point for the optimization was already good, the result may now look better than before.\n\n![](https://github.com/haesleinhuepf/napari-workflow-optimizer/raw/main/docs/screenshot6_finished_optimization.png)\n\n### Step 2: Manual parameter space plotting\n\nIn case the result is not perfect yet (as the fringed segmentation above suggests), consider manual plotting of the \nindividual parameters and their relation to segmentation quality to get an idea about the surrounding parameter space.\nTherefore, click the `Plot` button next to one of the workflow parameters.\nSelect the range in which the labeling quality should be determined (green arrows). In our example, the optimizer was setting the parameter to 2.34. \nThus, to demonstrate the procedure we plot the parameter space beween 0 and 10. \nThe quality plotted over this parameter obviously has a local maxium at 2.34, which was detected by the optimizer.\nHowever, it also has another local maxium at 8 and actually a plateau in the quality plot (orange arrows).\n\n![](https://github.com/haesleinhuepf/napari-workflow-optimizer/raw/main/docs/screenshot7_parameter_quality_plot.png)\n\nFor further optimization, we re-configure the algorithm and set a new starting point for optimization of the parameter to 8.\nAfterwards, we restart the optimization. It will then optimize the settings again from the new starting point.\n\n![](https://github.com/haesleinhuepf/napari-workflow-optimizer/raw/main/docs/screenshot8_start_optimization_again.png)\n\nAfter another moment, optimization will finish again, potentially leading to an even better result.\n\n![](https://github.com/haesleinhuepf/napari-workflow-optimizer/raw/main/docs/screenshot9_finished_optimization_again.png)\n\n### Step 3: Visualization of results\n\nMake sure the segmentation has high quality by inspecting the result visually. Use the `contour` setting of the labels layer\nand hide/show the outlines of the labeled layer:\n\n![](https://github.com/haesleinhuepf/napari-workflow-optimizer/raw/main/docs/screenshot10_contours_on.png)\n\n![](https://github.com/haesleinhuepf/napari-workflow-optimizer/raw/main/docs/screenshot11_contours_off.jpg)\n\n### Optimization Hints\n\nThe Workflow Optimizer uses the [Nelder-Mead simplex method](https://en.wikipedia.org/wiki/Nelder%E2%80%93Mead_method)\nfor optimizing parameters. This algorithm varies individual parameters and makes steps in the parameter space ideally following a gradient \nto a local optimum. Hence, this algorithm may not be capable of determining a global optimum in parameter space. \nParameter optimization is no magic. If it does not immediately work on your data, plot the parameters as introduced in Step 2 \nand identify parameters with a clear gradient and those with many local maxima. \nConsider optimizing the parameters with many local maxima manually and de-selecting their checkboxes for the optimization.\nThe optimizer will then only optimize the parameters showing the clear gradient. \nRepeat these steps a couple of times to get a feeling for your parameter space. \n\nFurthermore, parameter optimization works well if\n* the initial settings are close to a good segmentation,\n* a small number of parameters (a short workflow) are optimized,\n* the reference annotation is prepared carefully and\n* the dataset is small. Consider using a small representative crop in case of bigger datasets.\n\n### Workflow optimization scripting\n\nFor optimizing workflows from within a jupyter notebook, check out our [example notebook for optimization using spare labels](https://github.com/haesleinhuepf/napari-workflow-optimizer/blob/main/demo/sparse_label_image_optimizer.ipynb). \nThe examples are more flexible than the graphical user interface and allow for example [optimizing intensity images](https://github.com/haesleinhuepf/napari-workflow-optimizer/blob/main/demo/intensity_image_optimizer.ipynb)\nand [binary images](https://github.com/haesleinhuepf/napari-workflow-optimizer/blob/main/demo/binary_image_optimizer.ipynb).\nThe membrane segmentation workflow optimization similar to the one shown above is also available as [jupyter notebook](https://github.com/haesleinhuepf/napari-workflow-optimizer/blob/main/demo/membrane_segmentation.ipynb).\n\n### Known issues\n\nIf you change the workflow architecture after the optimizer window was opened, please re-open it\nto select the parameters that should be optimized. Changing parameters is ok and re-opening is not necessary.\n\n----------------------------------\n\nThis [napari] plugin was generated with [Cookiecutter] using [@napari]'s [cookiecutter-napari-plugin] template.\n\n## Installation\n\nFurthermore, to reproduce the procedure above, please download and install \n[napari](https://napari.org/),\n[pyopencl](https://documen.tician.de/pyopencl/),\nthe [napari-pyclesperanto-assistant](https://www.napari-hub.org/plugins/napari-pyclesperanto-assistant) and\nthe [napari-segment-blobs-and-things-with-membranes](https://www.napari-hub.org/plugins/napari-segment-blobs-and-things-with-membranes) plugin. E.g. using \n[conda](https://docs.conda.io/en/latest/) and [pip](https://pypi.org/project/pip/):\n\n```\nconda create --name napari-opti python=3.8\nconda activate napari-opti\n\nconda install pyopencl napari\npip install napari-pyclesperanto-assistant napari-segment-blobs-and-things-with-membranes\npip install napari-workflow-optimizer\n```\n\n## Contributing\n\nContributions are very welcome. Tests can be run with [tox], please ensure\nthe coverage at least stays the same before you submit a pull request.\n\n## License\n\nDistributed under the terms of the [BSD-3] license,\n\"napari-workflow-optimizer\" is free and open source software\n\n## Issues\n\nIf you encounter any problems, please [file an issue] along with a detailed description.\n\n[napari]: https://github.com/napari/napari\n[Cookiecutter]: https://github.com/audreyr/cookiecutter\n[@napari]: https://github.com/napari\n[MIT]: http://opensource.org/licenses/MIT\n[BSD-3]: http://opensource.org/licenses/BSD-3-Clause\n[GNU GPL v3.0]: http://www.gnu.org/licenses/gpl-3.0.txt\n[GNU LGPL v3.0]: http://www.gnu.org/licenses/lgpl-3.0.txt\n[Apache Software License 2.0]: http://www.apache.org/licenses/LICENSE-2.0\n[Mozilla Public License 2.0]: https://www.mozilla.org/media/MPL/2.0/index.txt\n[cookiecutter-napari-plugin]: https://github.com/napari/cookiecutter-napari-plugin\n\n[file an issue]: https://github.com/haesleinhuepf/napari-workflow-optimizer/issues\n\n[napari]: https://github.com/napari/napari\n[tox]: https://tox.readthedocs.io/en/latest/\n[pip]: https://pypi.org/project/pip/\n[PyPI]: https://pypi.org/\n\n\n",
    "description_content_type": "text/markdown",
    "keywords": null,
    "home_page": "https://github.com/haesleinhuepf/napari-workflow-optimizer",
    "download_url": null,
    "author": "Robert Haase",
    "author_email": "robert.haase@tu-dresden.de",
    "maintainer": null,
    "maintainer_email": null,
    "license": "BSD-3-Clause",
    "classifier": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "Framework :: napari",
      "Topic :: Scientific/Engineering :: Image Processing",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Operating System :: OS Independent",
      "License :: OSI Approved :: BSD License"
    ],
    "requires_dist": [
      "napari-plugin-engine (>=0.1.4)",
      "numpy",
      "pyclesperanto-prototype",
      "scikit-learn",
      "napari-time-slicer",
      "matplotlib",
      "scipy",
      "napari-workflows",
      "napari-assistant (>=0.1.9)"
    ],
    "requires_python": ">=3.7",
    "requires_external": null,
    "project_url": [
      "Bug Tracker, https://github.com/haesleinhuepf/napari-workflow-optimizer/issues",
      "Documentation, https://github.com/haesleinhuepf/napari-workflow-optimizer#README.md",
      "Source Code, https://github.com/haesleinhuepf/napari-workflow-optimizer",
      "User Support, https://github.com/haesleinhuepf/napari-workflow-optimizer/issues"
    ],
    "provides_extra": null,
    "provides_dist": null,
    "obsoletes_dist": null
  },
  "npe1_shim": true
}