{
  "name": "napari-assistant",
  "display_name": "napari-assistant",
  "visibility": "public",
  "icon": "",
  "categories": [],
  "schema_version": "0.2.0",
  "on_activate": null,
  "on_deactivate": null,
  "contributions": {
    "commands": [
      {
        "id": "napari-assistant.Assistant",
        "title": "Assistant",
        "python_name": "napari_assistant._gui:Assistant",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-assistant.napari_experimental_provide_function",
        "title": "_split_stack",
        "python_name": "napari_assistant._napari_plugin:napari_experimental_provide_function",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      }
    ],
    "readers": null,
    "writers": null,
    "widgets": [
      {
        "command": "napari-assistant.Assistant",
        "display_name": "Assistant",
        "autogenerate": false
      },
      {
        "command": "napari-assistant.napari_experimental_provide_function",
        "display_name": "_split_stack",
        "autogenerate": true
      }
    ],
    "sample_data": null,
    "themes": null,
    "menus": {},
    "submenus": null,
    "keybindings": null,
    "configuration": []
  },
  "package_metadata": {
    "metadata_version": "2.1",
    "name": "napari-assistant",
    "version": "0.4.7",
    "dynamic": null,
    "platform": null,
    "supported_platform": null,
    "summary": "A pocket calculator like interface to image processing in napari",
    "description": "# napari-assistant\n[![License](https://img.shields.io/pypi/l/napari-assistant.svg?color=green)](https://github.com/haesleinhuepf/napari-assistant/raw/master/LICENSE)\n[![PyPI](https://img.shields.io/pypi/v/napari-assistant.svg?color=green)](https://pypi.org/project/napari-assistant)\n[![Python Version](https://img.shields.io/pypi/pyversions/napari-assistant.svg?color=green)](https://python.org)\n[![tests](https://github.com/haesleinhuepf/napari-assistant/workflows/tests/badge.svg)](https://github.com/haesleinhuepf/napari-assistant/actions)\n[![codecov](https://codecov.io/gh/haesleinhuepf/napari-assistant/branch/master/graph/badge.svg)](https://codecov.io/gh/haesleinhuepf/napari-assistant)\n[![Development Status](https://img.shields.io/pypi/status/napari-assistant.svg)](https://en.wikipedia.org/wiki/Software_release_life_cycle#Alpha)\n[![napari hub](https://img.shields.io/endpoint?url=https://api.napari-hub.org/shields/napari-assistant)](https://napari-hub.org/plugins/napari-assistant)\n[![DOI](https://zenodo.org/badge/463875112.svg)](https://zenodo.org/badge/latestdoi/463875112)\n\n\nThe napari-assistant is a [napari](https://github.com/napari/napari) meta-plugin for building image processing workflows. \n\n## Usage\n\nAfter installing one or more napari plugins that use the napari-assistant as user interface, you can start it from the \nmenu `Tools > Utilities > Assistant (na)` or run `naparia` from the command line. \n\nBy clicking on the buttons in the assistant, you can setup a workflow for processing the images.\n\n![img.png](https://github.com/haesleinhuepf/napari-assistant/raw/main/docs/napari-assistant-screenshot.png)\n\nWhile setting up your workflow, you can at any point select a layer from the layer list (1) and change the parameters of\nthe corresponding operation (2). The layer will update when you change parameters and also all subsequent operations. \nYou can also vary which operation is applied to the image (3). Also make sure the right input image layer is selected (4).\n\n![img.png](https://github.com/haesleinhuepf/napari-assistant/raw/main/docs/design_workflows.png)\n\n### Saving and loading workflows\n\nYou can also save and load workflows to disk. \n\n![img.png](https://github.com/haesleinhuepf/napari-assistant/raw/main/docs/save_and_load.png)\n\nAfter loading a workflow, make sure that the right input images are selected.\n\n### Code generation\n\nThe napari-assistant allows exporting the given workflow as Python script and Jupyter Notebook. \n\n![img.png](https://github.com/haesleinhuepf/napari-assistant/raw/main/docs/code_generator.png)\n\nFurthermore, if you have the [napari-script-editor](https://www.napari-hub.org/plugins/napari-script-editor) installed,\nyou can also send the current workflow as code to the script editor from the same menu.\n\n![img.png](https://github.com/haesleinhuepf/napari-assistant/raw/main/docs/napari_script_editor.png)\n\n### Plugin generation\n\nThere is also a Napari plugin generator available. Check out [its documentation](https://github.com/haesleinhuepf/napari-assistant-plugin-generator) to learn how napari-assistant compatible plugins can be generated directly from within the assistant.\n\n## Installation\n\nIt is recommended to install the napari-assistant via one of the plugins that use it as graphical user interface.\nYou find a complete list of plugins that use the assistant [on the napari-hub](https://www.napari-hub.org/?search=napari-assistant&sort=relevance).\nMultiple of these plugins come bundled when installing [devbio-napari](https://www.napari-hub.org/plugins/devbio-napari).\n\n## For developers\n\nIf you want to make your napari-plugin accessible from the napari-assistant, consider programming functions with a simple \ninterface that consume images, labels, integers, floats and strings. Annotate input and return types, e.g. like this:\n```python\ndef example_function_widget(image: \"napari.types.ImageData\") -> \"napari.types.LabelsData\":\n    from skimage.filters import threshold_otsu\n    binary_image = image > threshold_otsu(image)\n\n    from skimage.measure import label\n    return label(binary_image)\n```\n\nFurthermore, please add your function to the napari.yaml which uses [npe2](https://github.com/napari/npe2):\n```\nname: napari-npe2-test\ndisplay_name: napari-npe2-test\ncontributions:\n  commands: \n    - id: napari-npe2-test.make_magic_widget\n      python_name: napari_npe2_test._widget:example_magic_widget\n      title: Make example magic widget\n  widgets:\n    - command: napari-npe2-test.make_magic_widget\n      display_name: Segmentation / labeling > Otsu Labeling (nnpe2t)\n```\n\nTo put it in the right button within the napari-assistant, please use one of the following prefixes for the `display_name`:\n* `Filtering / noise removal > `\n* `Filtering / background removal > `\n* `Filtering > `\n* `Image math > `\n* `Transform > `\n* `Projection > `\n* `Segmentation / binarization > `\n* `Segmentation / labeling > `\n* `Segmentation post-processing > `\n* `Measurement > `\n* `Label neighbor filters > `\n* `Label filters > `\n* `Visualization > `\n\nYou find a fully functional example [here](https://github.com/haesleinhuepf/napari-npe2-test).\n\nLast but not least, to make your napari-plugin is listed in the napari-hub when searching for \"napari-assistant\", make sure\nyou mention it in your `readme`.\n\n## Feedback welcome!\n\nThe napari-assistant is developed in the open because we believe in the open source community. Feel free to drop feedback as [github issue](https://github.com/haesleinhuepf/napari-assistant/issues) or via [image.sc](https://image.sc)\n\n## Contributing\n\nContributions are very welcome. Please ensure\nthe test coverage at least stays the same before you submit a pull request.\n\n## License\n\nDistributed under the terms of the [BSD-3] license,\n\"napari-assistant\" is free and open source software\n\n## Acknowledgements\nThis project was supported by the Deutsche Forschungsgemeinschaft under Germany\u2019s Excellence Strategy \u2013 EXC2068 - Cluster of Excellence \"Physics of Life\" of TU Dresden. \nThis project has been made possible in part by grant number [2021-240341 (Napari plugin accelerator grant)](https://chanzuckerberg.com/science/programs-resources/imaging/napari/improving-image-processing/) from the Chan Zuckerberg Initiative DAF, an advised fund of the Silicon Valley Community Foundation.\n\n[BSD-3]: http://opensource.org/licenses/BSD-3-Clause\n\n",
    "description_content_type": "text/markdown",
    "keywords": null,
    "home_page": "https://github.com/haesleinhuepf/napari-assistant/",
    "download_url": null,
    "author": "Robert Haase, Ryan Savill",
    "author_email": "robert.haase@tu-dresden.de",
    "maintainer": null,
    "maintainer_email": null,
    "license": "BSD-3-Clause",
    "classifier": [
      "Framework :: napari",
      "License :: OSI Approved :: BSD License",
      "Topic :: Scientific/Engineering :: Image Processing",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Operating System :: OS Independent"
    ],
    "requires_dist": [
      "napari-plugin-engine >=0.1.4",
      "toolz",
      "napari >=0.4.14",
      "magicgui",
      "numpy !=1.19.4",
      "pyperclip",
      "loguru",
      "jupytext",
      "jupyter",
      "pandas",
      "napari-time-slicer >=0.4.8",
      "napari-workflows >=0.2.10"
    ],
    "requires_python": ">=3.8",
    "requires_external": null,
    "project_url": [
      "Bug Tracker, https://github.com/haesleinhuepf/napari-assistant/issues",
      "Documentation, https://github.com/haesleinhuepf/napari-assistant/",
      "Source Code, https://github.com/haesleinhuepf/napari-assistant",
      "User Support, https://forum.image.sc/"
    ],
    "provides_extra": null,
    "provides_dist": null,
    "obsoletes_dist": null
  },
  "npe1_shim": true
}