{
  "name": "napari-flim-phasor-plotter",
  "display_name": "FLIM phasor plotter",
  "visibility": "public",
  "icon": "",
  "categories": [
    "Annotation",
    "Segmentation",
    "Acquisition"
  ],
  "schema_version": "0.2.1",
  "on_activate": null,
  "on_deactivate": null,
  "contributions": {
    "commands": [
      {
        "id": "napari-flim-phasor-plotter.get_reader",
        "title": "Open data with FLIM phasor plotter",
        "python_name": "napari_flim_phasor_plotter._reader:napari_get_reader",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-flim-phasor-plotter.load_seminal_receptacle_image",
        "title": "Load sample data from FLIM phasor plotter",
        "python_name": "napari_flim_phasor_plotter._sample_data:load_seminal_receptacle_image",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-flim-phasor-plotter.load_hazelnut_image",
        "title": "Load sample data from FLIM phasor plotter",
        "python_name": "napari_flim_phasor_plotter._sample_data:load_hazelnut_image",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-flim-phasor-plotter.load_hazelnut_z_stack",
        "title": "Load sample data from FLIM phasor plotter",
        "python_name": "napari_flim_phasor_plotter._sample_data:load_hazelnut_z_stack",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-flim-phasor-plotter.load_lifetime_cat_synthetic",
        "title": "Load sample data from FLIM phasor plotter",
        "python_name": "napari_flim_phasor_plotter._sample_data:load_lifetime_cat_synthtetic_single_image",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-flim-phasor-plotter.calculate_phasors",
        "title": "Calculate Phasors",
        "python_name": "napari_flim_phasor_plotter._widget:make_flim_phasor_plot",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-flim-phasor-plotter.open_phasor_plot",
        "title": "Open FLIM Phasor Plotter",
        "python_name": "napari_flim_phasor_plotter._plotting:PhasorPlotterWidget",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-flim-phasor-plotter.convert_to_zarr",
        "title": "Convert Folder (Stack) to 6D zarr",
        "python_name": "napari_flim_phasor_plotter._io.convert_to_zarr:convert_folder_to_zarr",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-flim-phasor-plotter.convert_folder_to_ome_tif",
        "title": "Convert Folder (Stack) to 5D ome-tif (one file per timepoint)",
        "python_name": "napari_flim_phasor_plotter._io.convert_to_ome_tif:convert_folder_to_ome_tif",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-flim-phasor-plotter.convert_file_to_ome_tif",
        "title": "Convert Single File to ome-tif",
        "python_name": "napari_flim_phasor_plotter._io.convert_to_ome_tif:convert_file_to_ome_tif",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-flim-phasor-plotter.apply_binning",
        "title": "Apply binning to TCSPC FLIM data",
        "python_name": "napari_flim_phasor_plotter._widget:apply_binning_widget",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-flim-phasor-plotter.Split_N_Largest_Cluster_Labels",
        "title": "Split N Largest Clusters Labels",
        "python_name": "napari_flim_phasor_plotter._widget:Split_N_Largest_Cluster_Labels",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-flim-phasor-plotter.manual_label_extract",
        "title": "Manual Label Extract",
        "python_name": "napari_flim_phasor_plotter._widget:manual_label_extract",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-flim-phasor-plotter.smooth_cluster_mask",
        "title": "Smooth Cluster Mask",
        "python_name": "napari_flim_phasor_plotter._widget:smooth_cluster_mask",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      }
    ],
    "readers": [
      {
        "command": "napari-flim-phasor-plotter.get_reader",
        "filename_patterns": [
          "*.ptu",
          "*.PTU",
          "*.sdt",
          "*.SDT",
          "*.tif",
          "*.zarr"
        ],
        "accepts_directories": true
      }
    ],
    "writers": null,
    "widgets": [
      {
        "command": "napari-flim-phasor-plotter.calculate_phasors",
        "display_name": "Calculate Phasors",
        "autogenerate": false
      },
      {
        "command": "napari-flim-phasor-plotter.convert_to_zarr",
        "display_name": "Convert Folder (Stack) to zarr",
        "autogenerate": false
      },
      {
        "command": "napari-flim-phasor-plotter.convert_folder_to_ome_tif",
        "display_name": "Convert Folder (Stack) to ome-tif",
        "autogenerate": false
      },
      {
        "command": "napari-flim-phasor-plotter.convert_file_to_ome_tif",
        "display_name": "Convert Single File to ome-tif",
        "autogenerate": false
      },
      {
        "command": "napari-flim-phasor-plotter.apply_binning",
        "display_name": "Apply binning to TCSPC FLIM data",
        "autogenerate": false
      },
      {
        "command": "napari-flim-phasor-plotter.open_phasor_plot",
        "display_name": "Phasor Plotter Widget",
        "autogenerate": false
      },
      {
        "command": "napari-flim-phasor-plotter.Split_N_Largest_Cluster_Labels",
        "display_name": "Split N Largest Clusters Labels",
        "autogenerate": false
      },
      {
        "command": "napari-flim-phasor-plotter.manual_label_extract",
        "display_name": "Manual Label Extraction",
        "autogenerate": true
      },
      {
        "command": "napari-flim-phasor-plotter.smooth_cluster_mask",
        "display_name": "Smooth Cluster Mask",
        "autogenerate": true
      }
    ],
    "sample_data": [
      {
        "command": "napari-flim-phasor-plotter.load_seminal_receptacle_image",
        "key": "receptacle",
        "display_name": "Seminal Receptacle (2D Raw FLIM)"
      },
      {
        "command": "napari-flim-phasor-plotter.load_hazelnut_image",
        "key": "hazelnut",
        "display_name": "Hazelnut (2D Raw FLIM)"
      },
      {
        "command": "napari-flim-phasor-plotter.load_hazelnut_z_stack",
        "key": "hazelnut_z_stack",
        "display_name": "Hazelnut (3D Raw FLIM)"
      },
      {
        "command": "napari-flim-phasor-plotter.load_lifetime_cat_synthetic",
        "key": "lifetime_cat",
        "display_name": "Lifetime Cat (2D Raw Synthetic FLIM)"
      }
    ],
    "themes": null,
    "menus": {
      "napari/layers/data": [
        {
          "when": null,
          "group": null,
          "submenu": "convert_submenu"
        },
        {
          "when": null,
          "group": null,
          "submenu": "phasor_plot_submenu"
        },
        {
          "when": null,
          "group": null,
          "submenu": "pre_processing_submenu"
        },
        {
          "when": null,
          "group": null,
          "submenu": "post_processing_submenu"
        }
      ],
      "napari/file/io_utilities": [
        {
          "when": null,
          "group": null,
          "submenu": "convert_submenu"
        }
      ],
      "napari/layers/visualize": [
        {
          "command": "napari-flim-phasor-plotter.open_phasor_plot",
          "when": null,
          "group": null,
          "alt": null
        }
      ],
      "convert_submenu": [
        {
          "when": null,
          "group": null,
          "submenu": "single_file_submenu"
        },
        {
          "when": null,
          "group": null,
          "submenu": "folder_submenu"
        }
      ],
      "phasor_plot_submenu": [
        {
          "command": "napari-flim-phasor-plotter.calculate_phasors",
          "when": null,
          "group": null,
          "alt": null
        }
      ],
      "single_file_submenu": [
        {
          "command": "napari-flim-phasor-plotter.convert_file_to_ome_tif",
          "when": null,
          "group": null,
          "alt": null
        }
      ],
      "folder_submenu": [
        {
          "command": "napari-flim-phasor-plotter.convert_to_zarr",
          "when": null,
          "group": null,
          "alt": null
        },
        {
          "command": "napari-flim-phasor-plotter.convert_folder_to_ome_tif",
          "when": null,
          "group": null,
          "alt": null
        }
      ],
      "pre_processing_submenu": [
        {
          "command": "napari-flim-phasor-plotter.apply_binning",
          "when": null,
          "group": null,
          "alt": null
        }
      ],
      "post_processing_submenu": [
        {
          "command": "napari-flim-phasor-plotter.manual_label_extract",
          "when": null,
          "group": null,
          "alt": null
        },
        {
          "command": "napari-flim-phasor-plotter.Split_N_Largest_Cluster_Labels",
          "when": null,
          "group": null,
          "alt": null
        },
        {
          "command": "napari-flim-phasor-plotter.smooth_cluster_mask",
          "when": null,
          "group": null,
          "alt": null
        }
      ]
    },
    "submenus": [
      {
        "id": "convert_submenu",
        "label": "Convert",
        "icon": null
      },
      {
        "id": "single_file_submenu",
        "label": "Single File",
        "icon": null
      },
      {
        "id": "folder_submenu",
        "label": "Folder (Stack)",
        "icon": null
      },
      {
        "id": "phasor_plot_submenu",
        "label": "Phasors",
        "icon": null
      },
      {
        "id": "pre_processing_submenu",
        "label": "Pre-Processing",
        "icon": null
      },
      {
        "id": "post_processing_submenu",
        "label": "Post-Processing",
        "icon": null
      }
    ],
    "keybindings": null,
    "configuration": []
  },
  "package_metadata": {
    "metadata_version": "2.4",
    "name": "napari-flim-phasor-plotter",
    "version": "0.1.3",
    "dynamic": [
      "license-file"
    ],
    "platform": null,
    "supported_platform": null,
    "summary": "A plugin that performs phasor plot from TCSPC FLIM data.",
    "description": "# napari-flim-phasor-plotter\n\n[![License BSD-3](https://img.shields.io/pypi/l/napari-flim-phasor-plotter.svg?color=green)](https://github.com/zoccoler/napari-flim-phasor-plotter/raw/main/LICENSE)\n[![PyPI](https://img.shields.io/pypi/v/napari-flim-phasor-plotter.svg?color=green)](https://pypi.org/project/napari-flim-phasor-plotter)\n[![Python Version](https://img.shields.io/pypi/pyversions/napari-flim-phasor-plotter.svg?color=green)](https://python.org)\n[![tests](https://github.com/zoccoler/napari-flim-phasor-plotter/workflows/tests/badge.svg)](https://github.com/zoccoler/napari-flim-phasor-plotter/actions)\n[![codecov](https://codecov.io/gh/zoccoler/napari-flim-phasor-plotter/branch/main/graph/badge.svg)](https://codecov.io/gh/zoccoler/napari-flim-phasor-plotter)\n[![napari hub](https://img.shields.io/endpoint?url=https://api.napari-hub.org/shields/napari-flim-phasor-plotter)](https://napari-hub.org/plugins/napari-flim-phasor-plotter)\n[![DOI](https://zenodo.org/badge/578127094.svg)](https://zenodo.org/doi/10.5281/zenodo.12620955)\n\nNapari-flim-phasor-plotter is a [napari](https://napari.org/stable/) plugin to interactively load and show raw fluorescence lifetime imaging microscopy (FLIM) single images and series and generate phasor plots. These are Fourier transforms of the decay data being visualized using the [napari-clusters-plotter](https://github.com/BiAPoL/napari-clusters-plotter) plotter, adapted to suit the FLIM context. This allows qualitative and quantitative downstream analysis of FLIM images.  \n\n----------------------------------\n\n## Quick demo\n\n![](https://github.com/zoccoler/napari-flim-phasor-plotter/raw/main/images/napari_FLIM_phasor_calculator_Demo.gif)\n\n## Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n  - [Loading Raw FLIM Data](#loading-raw-flim-data)\n    1. [Input Data Types](#1-input-data-types)\n    2. [Opening a Raw FLIM Image](#2-opening-a-raw-flim-image)\n    3. [Loading Stacks](#3-loading-stacks)\n    4. [Sample Data](#4-sample-data)\n  - [Phasor Analysis](#phasor-analysis)\n    1. [Generating Phasor Plots](#1-generating-phasor-plots)\n    2. [Phasor Plot Navigation](#2-phasor-plot-navigation)\n    3. [Phasor Plot Selection](#3-phasor-plot-selection)\n    4. [Integrating Phasor Analysis into a Workflow](#4-integrating-phasor-analysis-into-a-workflow)\n        - [Clustering](#clustering)\n        - [Post-processing](#post-processing)\n  - [Saving Results](#saving-results)\n  - [Data Conversion](#data-conversion)\n- [Limitations](#limitations)\n- [Contributing](#contributing)\n- [License](#license)\n- [Issues](#issues)\n\n## Installation\n\nWe recommend installing `napari-flim-phasor-plotter` with [mamba](https://mamba.readthedocs.io/en/latest/) after having [Miniforge](https://github.com/conda-forge/miniforge) installed in your computer. Follow these steps from a terminal.\n\nClick [here](https://github.com/conda-forge/miniforge/releases) to choose the right download option for your OS after clicking on the latest release.\n\nCreate a conda environment:\n\n    mamba create -n napari-flim-phasor-env python=3.10 napari pyqt git\n    \nActivate the environment:\n\n    mamba activate napari-flim-phasor-env\n\nInstall `napari-flim-phasor-plotter` plugin with:\n\n    pip install napari-flim-phasor-plotter\n \nAlternatively, clone this repository and install the latest plugin development version with:\n\n    pip install git+https://github.com/zoccoler/napari-flim-phasor-plotter.git\n\n## Usage\n\n### Loading Raw FLIM Data\n\n#### 1. Input Data Types\n\nThis plugin can read the following FLIM **file types**:\n  - `.ptu`\n  - `.sdt`\n  - `.tif` (including `ome.tif`)\n  - `.zarr`\n\nThis plugin works with the following **data shapes**:\n  - 2D FLIM images (actually 3D data where FLIM counts are in the first axis, i.e., `(photon_counts, y, x)`).\n  - 3D FLIM images (actually 4D data where FLIM counts are in the first axis, i.e., `(photon_counts, z, y, x)`).\n  - 3D timelapse FLIM images (actually 5D data where FLIM counts are in the first axis, i.e., `(photon_counts, t, z, y, x)`).\n  - Multichannel `.tif` or `.zarr` data may need to be loaded separately.\n\nIf you read your files using this plugin as a reader, it returns and works with the data axes in the following order (data from multiple detectors are displayed as distinct napari layers):\n\n(`photon_counts`, `time`, `z`, `y`, `x`)\n\nEven if the data is 2D, the plugin will add a unitary `time` and a `z` axis.\nIt also provides the standard intensity image in another layer by summing the `photon_counts` dimension.\n\n#### 2. Opening a Raw FLIM Image\n\nDrag and drop a compatible file format (check supported file formats [here below](#input-data)) to open a FLIM image. It gets displayed in two layer: a 'raw FLIM image series' (a sequence of intensity images each corresponding to an individual time point of the FLIM 'micro-time'), and a timely summed up image (usually just known as the 'intensity' image). Scrolling through the FLIM time series provides a first glimpse of lifetimes across image regions.\n\n#### 3. Loading Stacks\n\nIf you have multiple slices or time-points as separated files, you can choose a folder containing the files. In order for the plugin to properly build a stack, the file names must contain some indication about which slice or time-point they represent, i.e., **each file name should contain a `_t` and/or `_z` followed by a number**.\n\nHere are a few example templates:\n- timelapse:\n  - `image_t001.ptu`\n  - `image_t002.ptu`\n- z-stack:\n  - `image_z01.sdt`\n  - `image_z02.sdt`\n- 3D timelapse:\n  - `image_t001_z001.tif`\n  - `image_t001_z002.tif`\n  - ...\n  - `image_t002_z001.tif`\n\n#### 4. Sample Data\n\nThe plugin comes with a few sample FLIM raw images:\n\n- '2D' raw FLIM images:\n  - Hazelnut (originally a `.ptu` file)\n  - Seminal Receptacle (originally a `.sdt` file)\n- '3D' raw FLIM image stack (Hazelnut 3D)\n  - Hazelnut 3D (originally a series of `.ptu` files)\n- '2D' synthetic FLIM image\n  - Lifetime Cat\n\n To load it, go to `File > Open Sample -> FLIM phasor plotter`.\n\n### Phasor Analysis\n\n#### 1. Generating Phasor Plots\n\nCall the plugin from the menu `Plugins > FLIM phasor plotter > Calculate Phasors` (or `Layers -> Data -> Phasors -> Calculate Phasors` if napari version >= `0.5.0`) to generate a phasor plot by pixel-wise Fourier transformation of the decay data. Hereby, select the FLIM image to be used (it should be the layer with the raw data), specify the laser pulse frequency (if information is present in the file metadata, this field will be updated after phasor calculation). Choose a harmonic for optimal visualization, define an intensity threshold (here in absoluete values) to exclude pixels of low photon counts, and optionally apply a number of iterations `n` of a 3x3 median filter. `Run` creates the phasor plot and an additional labels layer in the layer list.\n\n#### 2. Phasor Plot Navigation\n\n Use the toolbar on top of the plot to navigate through the plot. For example, by activating the zoom tool button (magnifying glass icon), you can zoom in (with left click) or out (with right click), just *remember to disbale the zoom tool after using it by clicking on the icon once again*.\n\nChange the colormap of the phasor plot from various `Colormaps` by clicking on the pulldown `Expand for advanced options`. There, you can also choose to display the color range in log scale by checking the `Log scale` checkbox. Optionally, add tau lines to the plot by specifying a range of lifetimes to be displayed (write them separated by commas) in the field `Tau lines` anc click on `Show/hide` to visualize them on top of the phasor plot.\n\n#### 3. Phasor Plot Selection\n\n Manually encircle a region of interest in the phasor plot to highlight the corresponding pixels in the newly created image layer. Hold `SHIFT` to select and visualize several clusters with different colors, as a way to investigate image regions of similar FLIM patterns.\n\n#### 4. Integrating Phasor Analysis into a Workflow\n\n##### Clustering\n\nThis plugin integrates with [napari-clusters-plotter plugin](https://github.com/BiAPoL/napari-clusters-plotter). Thus, you can use the [clustering widget](https://github.com/BiAPoL/napari-clusters-plotter?tab=readme-ov-file#clustering) provided by the `napari-clusters-plotter` plugin to segment the phasor plot automatically and then visualize the segmentation results in the original FLIM image. Access it via `Tools -> Measurement post-processing -> Clustering (ncp)`. Below is a demonstration:\n\n![clustering](https://github.com/zoccoler/napari-flim-phasor-plotter/raw/main/images/clustering.gif)\n\n##### Post-processing\n\nAfter cluster selection, it is common to have different labels (colors) for selected clusters. Within each label, it is also common to have disconnected regions and even isolated pixel in the segmentation. To address this, we offer a few basic post-processing functions. \n\nA common step is to select a single cluster of interest for further processing. By selecting the `Labels` layer (usually named `cluster_ids_in_space`) and checking the `show selected` checkbox, we can identify our cluster/label os interest by continuously increasing the label number until we find the desired cluster. After that, we can extract the chosen label as a mask via `Plugins -> FLIM phasor plotter -> Manual Label Extraction` (or `Layers -> Data -> Post-Processing -> Manual Label Extraction` if napari version >= `0.5.0`). This will create a new layer with the mask of the selected cluster.\n\nTo connect small isolated regions and remove small holes within the mask, we can use the `smooth_cluster_mask` function. This can be accessed via `Plugins -> FLIM phasor plotter -> Smooth Cluster Mask` (or `Layers -> Data -> Post-Processing -> Smooth Cluster Mask` if napari version >= `0.5.0`). This will remove holes with an area smaller than the specified `fill area px` in total number of pixels and connect regions within a given `smooth radius`. Don't forget to select the layer containing the mask before running the function, because this function expects a layer with a single label (like a binary mask).\n\nBeyond this point, we can use other plugins, like the `napari-segment-blobs-and-things-with-membranes` and `napari-skimage-regionprops` plugins, to further process the mask. For example, we can perform instance segmentation on the mask via `Tools -> Segmentation / labeling -> Connectec component labeling (scikit-image, nsbatwm)`. We can also extract features from the objects via `Tools -> Measurement tables -> Objetct Features/Properties (scikit-image, nsr)`.\n\nBelow is a demonstration of the post-processing steps:\n\n![post-processing](https://github.com/zoccoler/napari-flim-phasor-plotter/raw/main/images/post_processing.gif)\n\nAlso, this example workflow can be reproduced by running this jupyter notebook: [Example_workflow.ipynb](./src/napari_flim_phasor_plotter/notebooks/Example_workflow.ipynb).\n\n### Saving Results\n\n Save your segmentation results by selecting (clicking on) the corresponding `Labels` layer (usually named `cluster_ids_in_space`) and then going to `File -> Save Selected Layer`. This can save the layer as a `.tif` file. To save a screenshot of the phasor plot, click on the `Save` button on the toolbar. To save the phasor plot as a `.csv` file, go to `Tools -> Measurement -> Show table (nsr)` and a new widget will show up. From the `labels layer` dropdown, choose the layer that contains the table, whose name starts with `Labelled_pixels_from_`... and then click on the `Run` button. This should bring the table with `G` and `S` values for each pixel. Click on the `Save as csv...` button to save the table as a `.csv` file.\n\n![saving](https://github.com/zoccoler/napari-flim-phasor-plotter/raw/main/images/saving_results.gif)\n\n### Data Conversion\n\n#### Single File Conversion\n\n##### To `.ome.tif` (5D Output)\n\nIf you have a `.ptu` or `.sdt` file and want to convert it to an `.ome.tif` file with minimal metadata, you can do so via `Plugins > FLIM-phasor-plotter > Convert Single File to ome.tif` (or `Layers -> Data -> Convert -> Single File -> Convert Single File to ome.tif` if napari version >= `0.5.0`).\n\nAfter providing the path to the file, the plugin will try to fill the minimal metadata fields from the original raw file. In case it cannot find the information of a mandatory field (like the FLIM time resolution), it will display the missing field(s) in red to be filled manually.\n\n![](https://github.com/zoccoler/napari-flim-phasor-plotter/raw/main/images/convert_file_to_ome_tif.png)\n\nAfter filling the necessary fields, click on `Convert` to start the conversion. It will create a new folder (`OME-TIFs`) in the same path as the original file with at least two files:\n- one 5D (`ch, t, z, y, x`) `.ome.tif` file containing the intensity data (without the `photon_counts` axis)\n- one or more (in case of a timelapsed acquisition) 5D (`ch, photon_counts, z, y, x`) `.ome.tif` files containing the FLIM data (with the `photon_counts` axis), one file per timepoint.\n\nThe output files will always be 5D to be readily suitable for uploading to an OMERO server. If a dimension is missing, it will be added with a size of 1.\n\n#### Multiple Files Conversion (Stack)\n\n##### To `.ome.tif` (5D Output)\n\nIf you have a collection of `.ptu` or `.sdt` files and want to convert them to `.ome.tif` files with minimal metadata, you can do so via `Plugins > FLIM-phasor-plotter > Convert Folder (Stack) to ome.tif` (or `Layers -> Data -> Convert -> Folder (Stack) -> Convert Folder (Stack) to ome.tif` if napari version >= `0.5.0`).\n\nAfter providing the path to the folder, the plugin will try to fill the minimal metadata fields with the information present in the original files. In case it cannot find the information of a necessary field (like the Z Pixel Size), it will display the missing field(s) in red to be filled manually.\n\n![](https://github.com/zoccoler/napari-flim-phasor-plotter/raw/main/images/convert_folder_to_ome_tif.png)\n\nAfter filling the necessary fields, click on `Convert` to start the conversion. It will create a new folder (`OME-TIFs`) in the same path as the original files with at least two files:\n- one 5D (`ch, t, z, y, x`) `.ome.tif` file containing the intensity data (without the `photon_counts` axis)\n- one or more (in case of a timelapsed acquisition) 5D (`ch, photon_counts, z, y, x`) `.ome.tif` files containing the FLIM data (with the `photon_counts` axis), one file per timepoint.\n\nThe output files will always be 5D to be readily suitable for uploading to an OMERO server. If a dimension is missing, it will be added with a size of 1.\n\n#### To `.zarr` (6D Output)\n\nIf a collection of raw (uncompressed) images are larger than 4GB, we recommend converting them to `.zarr`. This can be done via `Plugins > FLIM-phasor-plotter > Convert Folder (Stack) to zarr`(or `Layers -> Data -> Convert -> Folder (Stack) -> Convert Folder (Stack) to zarr` if napari version >= `0.5.0`).\n\n_Warning: In the current version, lazy loading with `.zarr` is available, but processing may still load all data into memory, so keep track of your memory usage._\n\n![](https://github.com/zoccoler/napari-flim-phasor-plotter/raw/main/images/convert_to_zarr.png)\n\nClick on `Convert` to start the conversion. It will create a new \"folder\" (`.zarr`) in the same path as the original files. The `.zarr` file does **not** store any metadata, so keep the original files for reference.\n\n## Limitations\n\nThe plugin does not support:\n- Phasor calibration\n- Round cluster selection or cursor selection (only free-hand selection is available)\n- Pseudo-channel generation from selected clusters in the phasor plot\n- FRET analysis\n- Tile processing\n- Fitting of decay curves\n\n## Contributing\n\nContributions are very welcome. Tests can be run with [tox], please ensure\nthe coverage at least stays the same before you submit a pull request.\n\n## License\n\nDistributed under the terms of the [BSD-3] license,\n\"napari-flim-phasor-plotter\" is free and open source software. \n\nIf you use this plugin in a publication, please cite us: https://doi.org/10.5281/zenodo.12620956\n\n## Issues\n\nIf you encounter any problems, please [file an issue] along with a detailed description.\n\n[napari]: https://github.com/napari/napari\n[Cookiecutter]: https://github.com/audreyr/cookiecutter\n[@napari]: https://github.com/napari\n[MIT]: http://opensource.org/licenses/MIT\n[BSD-3]: http://opensource.org/licenses/BSD-3-Clause\n[GNU GPL v3.0]: http://www.gnu.org/licenses/gpl-3.0.txt\n[GNU LGPL v3.0]: http://www.gnu.org/licenses/lgpl-3.0.txt\n[Apache Software License 2.0]: http://www.apache.org/licenses/LICENSE-2.0\n[Mozilla Public License 2.0]: https://www.mozilla.org/media/MPL/2.0/index.txt\n[cookiecutter-napari-plugin]: https://github.com/napari/cookiecutter-napari-plugin\n\n[file an issue]: https://github.com/zoccoler/napari-flim-phasor-plotter/issues\n\n[napari]: https://github.com/napari/napari\n[tox]: https://tox.readthedocs.io/en/latest/\n[pip]: https://pypi.org/project/pip/\n[PyPI]: https://pypi.org/\n",
    "description_content_type": "text/markdown",
    "keywords": null,
    "home_page": "https://github.com/zoccoler/napari-flim-phasor-plotter",
    "download_url": null,
    "author": "Marcelo L. Zoccoler, Cornelia Wetzker",
    "author_email": "marzoccoler@gmail.com",
    "maintainer": null,
    "maintainer_email": null,
    "license": "BSD-3-Clause",
    "classifier": [
      "Development Status :: 2 - Pre-Alpha",
      "Framework :: napari",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Topic :: Scientific/Engineering :: Visualization",
      "Topic :: Scientific/Engineering :: Image Processing"
    ],
    "requires_dist": [
      "numpy",
      "magicgui",
      "qtpy",
      "napari>=0.4.19",
      "napari-clusters-plotter<0.9.0,>=0.8.1",
      "ptufile",
      "sdtfile",
      "natsort",
      "rocket-fft",
      "dask",
      "zarr",
      "napari-segment-blobs-and-things-with-membranes",
      "napari-skimage-regionprops",
      "scikit-image>=0.20.0",
      "tox; extra == \"testing\"",
      "pytest; extra == \"testing\"",
      "pytest-cov; extra == \"testing\"",
      "pytest-qt; extra == \"testing\"",
      "napari; extra == \"testing\"",
      "pyqt5; extra == \"testing\""
    ],
    "requires_python": ">=3.9",
    "requires_external": null,
    "project_url": [
      "Bug Tracker, https://github.com/zoccoler/napari-flim-phasor-plotter/issues",
      "Documentation, https://github.com/zoccoler/napari-flim-phasor-plotter#README.md",
      "Source Code, https://github.com/zoccoler/napari-flim-phasor-plotter",
      "User Support, https://github.com/zoccoler/napari-flim-phasor-plotter/issues"
    ],
    "provides_extra": [
      "testing"
    ],
    "provides_dist": null,
    "obsoletes_dist": null
  },
  "npe1_shim": false
}