{
  "name": "avidaq",
  "display_name": "napari avidaq",
  "visibility": "public",
  "icon": "",
  "categories": [],
  "schema_version": "0.2.1",
  "on_activate": null,
  "on_deactivate": null,
  "contributions": {
    "commands": [
      {
        "id": "avidaq.get_reader",
        "title": "Open data with napari avidaq",
        "python_name": "avidaq._reader:napari_get_reader",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "avidaq.write_multiple",
        "title": "Save multi-layer data with napari avidaq",
        "python_name": "avidaq._writer:write_multiple",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "avidaq.write_single_image",
        "title": "Save image data with napari avidaq",
        "python_name": "avidaq._writer:write_single_image",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "avidaq.make_sample_data",
        "title": "Load sample data from napari avidaq",
        "python_name": "avidaq._sample_data:make_sample_data",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "avidaq.make_qwidget",
        "title": "Make example QWidget",
        "python_name": "avidaq._widget:ExampleQWidget",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "avidaq.make_func_widget",
        "title": "Make example function widget",
        "python_name": "avidaq._widget:example_function_widget",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      }
    ],
    "readers": [
      {
        "command": "avidaq.get_reader",
        "filename_patterns": [
          "*.npy"
        ],
        "accepts_directories": false
      }
    ],
    "writers": [
      {
        "command": "avidaq.write_multiple",
        "layer_types": [
          "image*",
          "labels*"
        ],
        "filename_extensions": [],
        "display_name": ""
      },
      {
        "command": "avidaq.write_single_image",
        "layer_types": [
          "image"
        ],
        "filename_extensions": [
          ".npy"
        ],
        "display_name": ""
      }
    ],
    "widgets": [
      {
        "command": "avidaq.make_qwidget",
        "display_name": "Main AVIDAQ widget",
        "autogenerate": false
      },
      {
        "command": "avidaq.make_func_widget",
        "display_name": "Example Function Widget",
        "autogenerate": true
      }
    ],
    "sample_data": [
      {
        "command": "avidaq.make_sample_data",
        "key": "unique_id.1",
        "display_name": "napari avidaq"
      }
    ],
    "themes": null,
    "menus": {},
    "submenus": null,
    "keybindings": null,
    "configuration": []
  },
  "package_metadata": {
    "metadata_version": "2.1",
    "name": "avidaq",
    "version": "0.0.5",
    "dynamic": null,
    "platform": null,
    "supported_platform": null,
    "summary": "controls for napari and micromanger",
    "description": "# avidaq\n\n[![PyPI](https://img.shields.io/pypi/v/avidaq.svg?color=green)](https://pypi.org/project/avidaq)\n[![Python Version](https://img.shields.io/pypi/pyversions/avidaq.svg?color=green)](https://python.org)\n[![tests](https://github.com/optimax/avidaq/workflows/tests/badge.svg)](https://github.com/optimax/avidaq/actions)\n[![codecov](https://codecov.io/gh/optimax/avidaq/branch/main/graph/badge.svg)](https://codecov.io/gh/optimax/avidaq)\n[![napari hub](https://img.shields.io/endpoint?url=https://api.napari-hub.org/shields/avidaq)](https://napari-hub.org/plugins/avidaq)\n\ncontrols for napari and micromanger\n\n---\n\nThis [napari] plugin was generated with [Cookiecutter] using [@napari]'s [cookiecutter-napari-plugin] template.\n\n<!--\nDon't miss the full getting started guide to set up your new package:\nhttps://github.com/napari/cookiecutter-napari-plugin#getting-started\n\nand review the napari docs for plugin developers:\nhttps://napari.org/plugins/index.html\n-->\n\n## Installation\n\n### Standard installation\n\nYou can install `avidaq` via [pip]:\n\n```shell\npip install napari[all] avidaq\n```\n\n### Install from plugin menu\n\nAlternatively you can install `avidaq` via the [napari] plugin menu:\n\n## ![napari-add-plugin](napari-add-plugin.png)\n\n## Running\n\nFirst start micromanager.  Make sure the server port checkbox is activated.\n\nThen to start napari with the avidaq plugin active run:\n`napari -w avidaq`\n\n![](screenshot.png)\n\n## Updating presets\n\nMDA presets are stored in a json file in the user's home directory.\n\n```shell\n\n`C:\\\\Users\\YourName\\.avidaq\\mda_presets.json`\n```\n\nThis file should exist after plugin installation with some defaults. You do not need to create the file yourself.\n\nAdd or modify the values and reload napari to see the changes.\n\nAll parameter entries are optional, if not provided the default value will be used.\n\nThe parameter names and their descriptions can be found [here] (https://github.com/micro-manager/pycro-manager/blob/main/pycromanager/acq_util.py#L102-L115)\n\nThe format is as follows:\n\n```json\n{\n    \"gui_display_name\": {\n        \"parameter_name\": value,\n        \"parameter_name\": value,\n        ...\n    },\n    \"gui_display_name\": {\n        \"parameter_name\": value,\n        \"parameter_name\": value,\n        ...\n    },\n    ...\n}\n```\n\ndefaults:\n\n```json\n{\n  \"Basic\": {\n    \"num_time_points\": 5,\n    \"z_start\": 0,\n    \"z_end\": 6,\n    \"z_step\": 0.4\n  },\n  \"Simple\": {\n    \"num_time_points\": 2,\n    \"z_start\": 0,\n    \"z_end\": 2,\n    \"z_step\": 0.1\n  },\n  \"Detailed\": {\n    \"num_time_points\": 10,\n    \"z_start\": 0,\n    \"z_end\": 12,\n    \"z_step\": 0.2\n  }\n}\n```\n\n## Issues\n\nIf you encounter any problems, please [file an issue] along with a detailed description.\n\n## Development\n\nYou should have python3.8 or higher installed.\n\n1. clone this repo\n2. create a virtual environment `python -m venv .venv && source .venv/bin/activate`\n3. run `pip install -e '.[testing,build]'`\n4. run `pre-commit install`\n\n### To run unit tests\n\n`pytest`\n\n### typical workflow\n\n1. edit code in `/src`\n2. run napari -w avidaq\n3. repeat\n\n### Releasing to pypi\n\n\nProject is automically built and deployed to pypi upon\n\n\n---\n\n[napari]: https://github.com/napari/napari\n[cookiecutter]: https://github.com/audreyr/cookiecutter\n[@napari]: https://github.com/napari\n[mit]: http://opensource.org/licenses/MIT\n[bsd-3]: http://opensource.org/licenses/BSD-3-Clause\n[gnu gpl v3.0]: http://www.gnu.org/licenses/gpl-3.0.txt\n[gnu lgpl v3.0]: http://www.gnu.org/licenses/lgpl-3.0.txt\n[apache software license 2.0]: http://www.apache.org/licenses/LICENSE-2.0\n[mozilla public license 2.0]: https://www.mozilla.org/media/MPL/2.0/index.txt\n[cookiecutter-napari-plugin]: https://github.com/napari/cookiecutter-napari-plugin\n[napari]: https://github.com/napari/napari\n[tox]: https://tox.readthedocs.io/en/latest/\n[pip]: https://pypi.org/project/pip/\n[pypi]: https://pypi.org/\n",
    "description_content_type": "text/markdown",
    "keywords": null,
    "home_page": null,
    "download_url": null,
    "author": "Riley M Shea",
    "author_email": "RileyMShea@gmail.com",
    "maintainer": null,
    "maintainer_email": null,
    "license": "BSD-3-Clause",
    "classifier": [
      "Development Status :: 2 - Pre-Alpha",
      "Framework :: napari",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: 3.10",
      "Topic :: Scientific/Engineering :: Image Processing",
      "Typing :: Typed"
    ],
    "requires_dist": [
      "magicgui",
      "numpy",
      "pycromanager",
      "qtpy",
      "twine ; extra == 'build'",
      "black ; extra == 'testing'",
      "ipykernel ; extra == 'testing'",
      "matplotlib ; extra == 'testing'",
      "napari ; extra == 'testing'",
      "pyqt5 ; extra == 'testing'",
      "pyright ; extra == 'testing'",
      "pytest ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'",
      "pytest-qt ; extra == 'testing'",
      "tox ; extra == 'testing'",
      "yappi ; extra == 'testing'"
    ],
    "requires_python": ">=3.8",
    "requires_external": null,
    "project_url": null,
    "provides_extra": [
      "build",
      "testing"
    ],
    "provides_dist": null,
    "obsoletes_dist": null
  },
  "npe1_shim": false
}