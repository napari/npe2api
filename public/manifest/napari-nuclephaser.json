{
  "name": "napari-nuclephaser",
  "display_name": "NuclePhaser",
  "visibility": "public",
  "icon": "",
  "categories": [
    "Annotation",
    "Segmentation",
    "Acquisition"
  ],
  "schema_version": "0.2.1",
  "on_activate": null,
  "on_deactivate": null,
  "contributions": {
    "commands": [
      {
        "id": "napari-nuclephaser.make_points",
        "title": "Mark cells with points",
        "python_name": "napari_nuclephaser._widget:make_points",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-nuclephaser.directorypicker",
        "title": "Pick working directory",
        "python_name": "napari_nuclephaser._widget:directorypicker",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-nuclephaser.give_num_points",
        "title": "Count up the points",
        "python_name": "napari_nuclephaser._widget:give_num_points",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-nuclephaser.calibrate_with_known_number",
        "title": "Find best threshold for model with known number of object on image",
        "python_name": "napari_nuclephaser._widget:calibrate_with_known_number",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-nuclephaser.predict_on_stack",
        "title": "Predict on stack of images",
        "python_name": "napari_nuclephaser._widget:predict_on_stack",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-nuclephaser.convert_points_to_labels",
        "title": "Convert detection on stack from points to labels for tracking",
        "python_name": "napari_nuclephaser._widget:convert_points_to_labels",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-nuclephaser.calibrate_with_dapi_image",
        "title": "Calibrate model and calculate accuracy using Phase-DAPI image pair",
        "python_name": "napari_nuclephaser._widget:calibrate_with_dapi_image",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-nuclephaser.calibrate_with_points",
        "title": "Calibrate model and calculate accuracy using ground truth points layer",
        "python_name": "napari_nuclephaser._widget:calibrate_with_points",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      }
    ],
    "readers": null,
    "writers": null,
    "widgets": [
      {
        "command": "napari-nuclephaser.make_points",
        "display_name": "Predict on single image",
        "autogenerate": false
      },
      {
        "command": "napari-nuclephaser.predict_on_stack",
        "display_name": "Predict on 1-stack",
        "autogenerate": false
      },
      {
        "command": "napari-nuclephaser.calibrate_with_known_number",
        "display_name": "Calibrate with known number",
        "autogenerate": false
      },
      {
        "command": "napari-nuclephaser.calibrate_with_dapi_image",
        "display_name": "Calibrate with DAPI image",
        "autogenerate": false
      },
      {
        "command": "napari-nuclephaser.calibrate_with_points",
        "display_name": "Calibrate with points",
        "autogenerate": false
      },
      {
        "command": "napari-nuclephaser.convert_points_to_labels",
        "display_name": "Convert points to labels",
        "autogenerate": false
      },
      {
        "command": "napari-nuclephaser.give_num_points",
        "display_name": "Count points on single image",
        "autogenerate": false
      }
    ],
    "sample_data": null,
    "themes": null,
    "menus": {},
    "submenus": null,
    "keybindings": null,
    "configuration": []
  },
  "package_metadata": {
    "metadata_version": "2.4",
    "name": "napari-nuclephaser",
    "version": "0.1.0",
    "dynamic": [
      "license-file"
    ],
    "platform": null,
    "supported_platform": null,
    "summary": "A Napari plugin to detect and count nuclei on phase contrast images",
    "description": "# napari-nuclephaser\n\n[![License MIT](https://img.shields.io/pypi/l/napari-nuclephaser.svg?color=green)](https://github.com/nikvo1/napari-nuclephaser/raw/main/LICENSE)\n[![PyPI](https://img.shields.io/pypi/v/napari-nuclephaser.svg?color=green)](https://pypi.org/project/napari-nuclephaser)\n[![Python Version](https://img.shields.io/pypi/pyversions/napari-nuclephaser.svg?color=green)](https://python.org)\n[![tests](https://github.com/nikvo1/napari-nuclephaser/workflows/tests/badge.svg)](https://github.com/nikvo1/napari-nuclephaser/actions)\n[![napari hub](https://img.shields.io/endpoint?url=https://api.napari-hub.org/shields/napari-nuclephaser)](https://napari-hub.org/plugins/napari-nuclephaser)\n[![npe2](https://img.shields.io/badge/plugin-npe2-blue?link=https://napari.org/stable/plugins/index.html)](https://napari.org/stable/plugins/index.html)\n[![Copier](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/copier-org/copier/master/img/badge/badge-grayscale-inverted-border-purple.json)](https://github.com/copier-org/copier)\n\nA Napari plugin to detect and count nuclei on phase contrast images\n\nnapari-nuclephaser utilizes [Ultralytics](https://docs.ultralytics.com/) YOLO object detection models and [obss/sahi](https://github.com/obss/sahi) sliced inference methods to detect cell nuclei on phase contrast (and other brightfield) images of any size, including large whole slide ones. Learn more with [Documentation](https://napari-nuclephaser.readthedocs.io/en/latest/index.html).\n\n# Nuclei detection\n\nWe trained a series of [YOLOv5](https://github.com/ultralytics/yolov5) and [YOLOv11](https://github.com/ultralytics/ultralytics) models to detect nuclei on phase contrast images. It can be used for counting cells or for individual cell tracking (using nuclei detections as tracking marks). Prominent features of this approach are:\n- Napari-nuclephaser plugin includes [obss/sahi](https://github.com/obss/sahi) functionality, allowing detection on images of arbitrary sizes.\n- YOLO models are fast, providing reasonable inference speed even with CPU.\n- Ability to predict and automatically count nuclei on stacks of images, making it convenient for cell population growth studies and individual cell tracking.\n\n![Inference examples](https://github.com/user-attachments/assets/c7e4d0e6-44c1-4268-aae5-6bb78500d928)\n\n# Calibration algorithm\n\nResult of object detection model inference is highly dependent on _confidence threshold_ parameter.\n\n![Confidence threshold](https://github.com/user-attachments/assets/888bfc2b-9e6d-4fe8-b0e3-115b0ca4a394)\n\nWe created several calibration (finding optimal confidence threshold) algorithms that allow adjusting models to specific use cases (cell types, magnifications, illumination settings, cameras etc.):\n- Calibration using known number of objects on an image. Doesn't produce accuracy metrics.\n- Calibration using fluorescent nuclei stain image (for example, DAPI image). Produces accuracy metrics.\n- Calibration using manual annotation of nuclei. Produces accuracy metrics.\n\nApart from optimal confidence threshold search, these algorithms return accuracy metrics for specific use cases. Given that the calibration image is large, only part of it is used for search of threshold, while the second part is used for evaluation model's accuracy.\nAccuracy metrics are [Mean Absolute Percentage Error (MAPE)](https://en.wikipedia.org/wiki/Mean_absolute_percentage_error) and prediction-ground truth scatterplot, which shows how well model performs with different densities of cells.\n\nLearn more about calibration in [Documentation](https://napari-nuclephaser.readthedocs.io/en/latest/General%20information/Confidence%20threshold%20calibration.html).\n\n![Calibration methods](https://github.com/user-attachments/assets/a229a3c4-fbe3-4945-9139-84dfcc2758ad)\n\n# Models\n\nCurrently only YOLOv5n, YOLOv5s, YOLOv11n and YOLOv11s models, as well as fluorescent nuclei detector YOLOv5n are available (downloaded automatically with _pip install napari-nuclephaser_). We are currently working on adding YOLOv5m-x and YOLOv11m-x models.\n\n> [!NOTE]\n> Feel free to use the models published there without the plugin!\n\n# Plugin functionality\nnapari-nuclephaser plugin offers following widgets:\n- Widget for inference on single image. Result can be in the form of points or boxes with or without confidence scores. Automatically returns number of cells in the name of result layer.\n- Widget for inference on stack of images. Optionally can create .csv or .xlsx file at given location with counting results.\n- Widget for calibration using known number of cells.\n- Widget for calibration using fluorescent nuclei image (fluorescent nuclei detection model is used as a perfect predictor).\n- Widget for calibration using manual annotations.\n- Widget for transforming Napari Points layer into Labels layer, which allows turning detection in tracking algorithms-digestible form (in particular, [btrack](https://github.com/quantumjot/btrack)).\n- Widget for counting number of points in Points layer.\n\nLearn more about widgets and their functionality at [Documentation](https://napari-nuclephaser.readthedocs.io/en/latest/index.html).\n\n# Citation\n\nWe are currently working on a paper with full description of our approach and how we trained and tested our models.\n\n----------------------------------\n\nThis [napari] plugin was generated with [copier] using the [napari-plugin-template].\n\n<!--\nDon't miss the full getting started guide to set up your new package:\nhttps://github.com/napari/napari-plugin-template#getting-started\n\nand review the napari docs for plugin developers:\nhttps://napari.org/stable/plugins/index.html\n-->\n\n# Installation\n\n### Option 1: Using Anaconda (recommended)\n\nWe recommend installation using [Anaconda Distribution](https://www.anaconda.com/)\n\n1. Install Anaconda with [Installation instructions](https://www.anaconda.com/docs/getting-started/anaconda/install)\n\n2. Open Anaconda Prompt using Search Bar or Anaconda Navigator\n\n3. Create new environment with default anaconda packages using command\n\n```sh\nconda create --name napari-env anaconda\n```\n4. Activate new environment using command\n\n```sh\nconda activate napari-env\n```\n5. Install [Napari](https://napari.org/stable/) using command\n\n```sh\npip install napari[all]\n```\n6. Verify napari installation using following command. It should open napari GUI.\n\n```sh\nnapari\n```\n7. Install napari-nuclephaser plugin using command\n\n```sh\npip install napari-nuclephaser\n```\n8. Plugin is ready to be used! Start napari by typing\n\n```sh\nnapari\n```\nInitialize plugin's widgets by opening Plugins window and choosing NuclePhaser.\n\n### Installation with GPU\n\nIf you have [NVIDIA GPU with CUDA](https://developer.nvidia.com/cuda-gpus), you can significantly increase plugin's speed.\n\nTo install GPU-powered version of the plugin, you first need to do all the steps for the installation using Anaconda (above). Then you need to:\n\n1. Install CUDA using [official instructions](https://developer.nvidia.com/cuda-downloads)\n> [!NOTE]\n> Check which versions of CUDA are supported by current [torch installation](https://pytorch.org/get-started/locally/) and consider [installing earlier ones](https://developer.nvidia.com/cuda-toolkit-archive)\n\n2. Check CUDA installation with nvidia-smi command in the command line.\n\n```sh\nnvidia-smi\n```\n3. In the environment with napari and napari-nuclephaser installed, install CUDA-supported torch by typing specific command for your system, which can be found at [torch installation page](https://pytorch.org/get-started/locally/). For example, if you have Windows-based system and CUDA 12.6, your line should look like\n\n```sh\npip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu126\n```\n\n> [!WARNING]\n> During our tests, torchvision wasn't installed using this line. To avoid that, add -U after install:\n> ```sh\n>pip3 install -U torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu126\n>```\n\n----------------------------------\n\n### Option 2: Using standalone napari app (simpler)\n\n1. Download and install napari as standalone app using [installation instructions](https://napari.org/dev/tutorials/fundamentals/installation_bundle_conda.html)\n\n2. Search, download and install napari-nuclephaser plugin by opening the app, navigating to Plugins window and choosing Install/Uninstall plugins...\n\n----------------------------------\n\n## Contributing\n\nContributions are very welcome. Tests can be run with [tox], please ensure\nthe coverage at least stays the same before you submit a pull request.\n\n## License\n\nDistributed under the terms of the [MIT] license,\n\"napari-nuclephaser\" is free and open source software\n\n## Issues\n\nIf you encounter any problems, please [file an issue] along with a detailed description.\n\n[napari]: https://github.com/napari/napari\n[copier]: https://copier.readthedocs.io/en/stable/\n[@napari]: https://github.com/napari\n[MIT]: http://opensource.org/licenses/MIT\n[BSD-3]: http://opensource.org/licenses/BSD-3-Clause\n[GNU GPL v3.0]: http://www.gnu.org/licenses/gpl-3.0.txt\n[GNU LGPL v3.0]: http://www.gnu.org/licenses/lgpl-3.0.txt\n[Apache Software License 2.0]: http://www.apache.org/licenses/LICENSE-2.0\n[Mozilla Public License 2.0]: https://www.mozilla.org/media/MPL/2.0/index.txt\n[napari-plugin-template]: https://github.com/napari/napari-plugin-template\n\n[file an issue]: https://github.com/nikvo1/napari-nuclephaser/issues\n\n[napari]: https://github.com/napari/napari\n[tox]: https://tox.readthedocs.io/en/latest/\n[pip]: https://pypi.org/project/pip/\n[PyPI]: https://pypi.org/\n",
    "description_content_type": "text/markdown",
    "keywords": null,
    "home_page": null,
    "download_url": null,
    "author": "Nikita Voloshin",
    "author_email": "nikita.voloshin.98@gmail.com",
    "maintainer": null,
    "maintainer_email": null,
    "license": "MIT License\n\nCopyright (c) 2025 nikvo1\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "classifier": [
      "Development Status :: 2 - Pre-Alpha",
      "Framework :: napari",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.12",
      "Programming Language :: Python :: 3.13",
      "Topic :: Scientific/Engineering :: Image Processing"
    ],
    "requires_dist": [
      "setuptools",
      "wheel",
      "napari",
      "ultralytics",
      "yolov5",
      "magicgui",
      "sahi",
      "scikit-image",
      "torch",
      "pathlib",
      "numpy",
      "typing",
      "pandas",
      "openpyxl",
      "seaborn",
      "opencv-python",
      "imagecodecs",
      "tox; extra == \"testing\"",
      "pytest; extra == \"testing\"",
      "pytest-cov; extra == \"testing\"",
      "pytest-qt; extra == \"testing\"",
      "pytest-mock; extra == \"testing\"",
      "napari; extra == \"testing\"",
      "pyqt5; extra == \"testing\"",
      "opencv-python-headless; extra == \"testing\""
    ],
    "requires_python": ">=3.10",
    "requires_external": null,
    "project_url": [
      "Bug Tracker, https://github.com/nikvo1/napari-nuclephaser/issues",
      "Documentation, https://github.com/nikvo1/napari-nuclephaser#README.md",
      "Source Code, https://github.com/nikvo1/napari-nuclephaser",
      "User Support, https://github.com/nikvo1/napari-nuclephaser/issues"
    ],
    "provides_extra": [
      "testing"
    ],
    "provides_dist": null,
    "obsoletes_dist": null
  },
  "npe1_shim": false
}