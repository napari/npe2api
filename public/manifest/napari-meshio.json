{
  "name": "napari-meshio",
  "display_name": "meshio",
  "visibility": "public",
  "icon": "",
  "categories": [],
  "schema_version": "0.2.0",
  "on_activate": null,
  "on_deactivate": null,
  "contributions": {
    "commands": [
      {
        "id": "napari-meshio.get_reader",
        "title": "Open data with meshio",
        "python_name": "napari_meshio._reader:napari_get_reader",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-meshio.write_multiple",
        "title": "Save multi-layer data with meshio",
        "python_name": "napari_meshio._writer:write_multiple",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-meshio.write_single_surface",
        "title": "Save image data with meshio",
        "python_name": "napari_meshio._writer:write_single_surface",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-meshio.bunny",
        "title": "Load sample data from meshio, Stanford bunny mesh data",
        "python_name": "napari_meshio._sample_data:bunny",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      }
    ],
    "readers": [
      {
        "command": "napari-meshio.get_reader",
        "filename_patterns": [
          "*.inp",
          "*.msh",
          "*.avs",
          "*.cgns",
          "*.xml",
          "*.e",
          "*.exo",
          "*.f3grid",
          "*.h5m",
          "*.mdpa",
          "*.mesh",
          "*.meshb",
          "*.med",
          "*.bdf",
          "*.fem",
          "*.nas",
          "*.vol",
          "*.vol.gz",
          "*.msh",
          "*.obj",
          "*.off",
          "*.post",
          "*.post.gz",
          "*.dato",
          "*.dato.gz",
          "*.ply",
          "*.stl",
          "*.dat",
          "*.node",
          "*.ele",
          "*.su2",
          "*.ugrid",
          "*.vtk",
          "*.vtu",
          "*.wkt",
          "*.xdmf",
          "*.xmf"
        ],
        "accepts_directories": false
      }
    ],
    "writers": [
      {
        "command": "napari-meshio.write_multiple",
        "layer_types": [
          "surface*"
        ],
        "filename_extensions": [],
        "display_name": ""
      },
      {
        "command": "napari-meshio.write_single_surface",
        "layer_types": [
          "surface"
        ],
        "filename_extensions": [
          ".inp",
          ".msh",
          ".avs",
          ".cgns",
          ".xml",
          ".e",
          ".exo",
          ".f3grid",
          ".h5m",
          ".mdpa",
          ".mesh",
          ".meshb",
          ".med",
          ".bdf",
          ".fem",
          ".nas",
          ".vol",
          ".vol.gz",
          ".msh",
          ".obj",
          ".off",
          ".post",
          ".post.gz",
          ".dato",
          ".dato.gz",
          ".ply",
          ".stl",
          ".dat",
          ".node",
          ".ele",
          ".su2",
          ".ugrid",
          ".vtk",
          ".vtu",
          ".wkt",
          ".xdmf",
          ".xmf"
        ],
        "display_name": ""
      }
    ],
    "widgets": null,
    "sample_data": [
      {
        "command": "napari-meshio.bunny",
        "key": "bunny",
        "display_name": "bunny"
      }
    ],
    "themes": null,
    "menus": {},
    "submenus": null,
    "keybindings": null,
    "configuration": []
  },
  "package_metadata": {
    "metadata_version": "2.1",
    "name": "napari-meshio",
    "version": "0.0.1",
    "dynamic": null,
    "platform": null,
    "supported_platform": null,
    "summary": "I/O for mesh files.",
    "description": "# napari-meshio\n\n[![License MIT](https://img.shields.io/pypi/l/napari-meshio.svg?color=green)](https://github.com/GenevieveBuckley/napari-meshio/raw/main/LICENSE)\n[![PyPI](https://img.shields.io/pypi/v/napari-meshio.svg?color=green)](https://pypi.org/project/napari-meshio)\n[![Python Version](https://img.shields.io/pypi/pyversions/napari-meshio.svg?color=green)](https://python.org)\n[![tests](https://github.com/GenevieveBuckley/napari-meshio/workflows/tests/badge.svg)](https://github.com/GenevieveBuckley/napari-meshio/actions)\n[![codecov](https://codecov.io/gh/GenevieveBuckley/napari-meshio/branch/main/graph/badge.svg)](https://codecov.io/gh/GenevieveBuckley/napari-meshio)\n[![napari hub](https://img.shields.io/endpoint?url=https://api.napari-hub.org/shields/napari-meshio)](https://napari-hub.org/plugins/napari-meshio)\n\nThis napari plugin uses [meshio](https://github.com/nschloe/meshio) to read and write mesh files to surfaces in napari.\n\n![Screenshot: Stanford bunny example data in napari](assets/bunny-screenshot.png)\n\n*Image caption: screenshot of the [Stanford bunny](http://graphics.stanford.edu/data/3Dscanrep/) example surface mesh open in napari.*\n\n<!--\nDon't miss the full getting started guide to set up your new package:\nhttps://github.com/napari/cookiecutter-napari-plugin#getting-started\n\nand review the napari docs for plugin developers:\nhttps://napari.org/stable/plugins/index.html\n-->\n\n- [Installation](#installation)\n- [How to use napari-meshio](#how-to-use-napari-meshio)\n    - [Read surface data from file](#read-surface-data-from-file)\n    - [Open example surface data](#open-example-surface-data)\n    - [Save surface data](#save-surface-data)\n    - [Supported mesh file formats](#supported-mesh-file-formats)\n- [Contributing](#contributing)\n- [License](#license)\n- [Issues](#issues)\n\n## Installation\n\nYou can install `napari-meshio` via [pip]:\n\n    pip install napari-meshio\n\n\n\nTo install latest development version :\n\n    pip install git+https://github.com/GenevieveBuckley/napari-meshio.git\n\n\n## How to use napari-meshio\n\n### Read surface data from file\n\nDrag and drop the file onto the napari viewer.\n\n*Note: [Here](https://people.sc.fsu.edu/~jburkardt/data/ply/ply.html) are a number of `.ply` example files you can download to try, like [this airplane](https://people.sc.fsu.edu/~jburkardt/data/ply/airplane.ply) (see [image](https://people.sc.fsu.edu/~jburkardt/data/ply/airplane.png)).*\n\n### Open example surface data\n\nLaunch the napari viewer, then open one of the sample datasets (eg: the [Stanford bunny](http://graphics.stanford.edu/data/3Dscanrep/)) from the file menu:\n\n`File` > `Open Sample` > `napari-meshio` > `bunny`\n\nOr, open sample data from python with:\n\n```python\nimport napari\n\nviewer = napari.Viewer(ndisplay=3)\nviewer.open_sample('napari-meshio', 'bunny')\n```\n\n### Save surface data\n\nTo save a surface layer, click the layer name to select it, and then choose save from the file menu:\n\n`File` > `Save selected layer(s)`\n\nYou can also use keyboard shortcuts to save the selected surface layer:\n- Windows/Linux: `Control` + `S`\n- Mac: `\u2318` + `S`\n\nOr, save surface layers from python with:\n```python\nfilename = \"bunny.stl\"\nviewer.layers['bunny'].save(filename)\n```\n*Note: this code example assumes you have the Stanford bunny example dataset loaded.*\n\nA [wide variety of surface mesh file formats are supported](#supported-mesh-file-formats) by\n[meshio](https://github.com/nschloe/meshio).\nIf no file extension is provided when saving a surface layer,\nthe default is the `.ply` polygon file format.\n\n### Supported mesh file formats\n\n*Note: Only triangular mesh faces are supported by napari.*\n\nThe [meshio](https://github.com/nschloe/meshio) library documentation describes the supported file formats:\n\n> There are various mesh formats available for representing unstructured meshes.\nmeshio can read and write all of the following and smoothly converts between them:\n>\n>> [Abaqus](http://abaqus.software.polimi.it/v6.14/index.html) (`.inp`),\n>> ANSYS msh (`.msh`),\n>> [AVS-UCD](https://lanl.github.io/LaGriT/pages/docs/read_avs.html) (`.avs`),\n>> [CGNS](https://cgns.github.io/) (`.cgns`),\n>> [DOLFIN XML](https://manpages.ubuntu.com/manpages/jammy/en/man1/dolfin-convert.1.html) (`.xml`),\n>> [Exodus](https://nschloe.github.io/meshio/exodus.pdf) (`.e`, `.exo`),\n>> [FLAC3D](https://www.itascacg.com/software/flac3d) (`.f3grid`),\n>> [H5M](https://www.mcs.anl.gov/~fathom/moab-docs/h5mmain.html) (`.h5m`),\n>> [Kratos/MDPA](https://github.com/KratosMultiphysics/Kratos/wiki/Input-data) (`.mdpa`),\n>> [Medit](https://people.sc.fsu.edu/~jburkardt/data/medit/medit.html) (`.mesh`, `.meshb`),\n>> [MED/Salome](https://docs.salome-platform.org/latest/dev/MEDCoupling/developer/med-file.html) (`.med`),\n>> [Nastran](https://help.autodesk.com/view/NSTRN/2019/ENU/?guid=GUID-42B54ACB-FBE3-47CA-B8FE-475E7AD91A00) (bulk data, `.bdf`, `.fem`, `.nas`),\n>> [Netgen](https://github.com/ngsolve/netgen) (`.vol`, `.vol.gz`),\n>> [Neuroglancer precomputed format](https://github.com/google/neuroglancer/tree/master/src/neuroglancer/datasource/precomputed#mesh-representation-of-segmented-object-surfaces),\n>> [Gmsh](https://gmsh.info/doc/texinfo/gmsh.html#File-formats) (format versions 2.2, 4.0, and 4.1, `.msh`),\n>> [OBJ](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (`.obj`),\n>> [OFF](https://segeval.cs.princeton.edu/public/off_format.html) (`.off`),\n>> [PERMAS](https://www.intes.de) (`.post`, `.post.gz`, `.dato`, `.dato.gz`),\n>> [PLY](<https://en.wikipedia.org/wiki/PLY_(file_format)>) (`.ply`),\n>> [STL](<https://en.wikipedia.org/wiki/STL_(file_format)>) (`.stl`),\n>> [Tecplot .dat](http://paulbourke.net/dataformats/tp/),\n>> [TetGen .node/.ele](https://wias-berlin.de/software/tetgen/fformats.html),\n>> [SVG](https://www.w3.org/TR/SVG/) (2D output only) (`.svg`),\n>> [SU2](https://su2code.github.io/docs_v7/Mesh-File/) (`.su2`),\n>> [UGRID](https://www.simcenter.msstate.edu/software/documentation/ug_io/3d_grid_file_type_ugrid.html) (`.ugrid`),\n>> [VTK](https://vtk.org/wp-content/uploads/2015/04/file-formats.pdf) (`.vtk`),\n>> [VTU](https://vtk.org/Wiki/VTK_XML_Formats) (`.vtu`),\n>> [WKT](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry) ([TIN](https://en.wikipedia.org/wiki/Triangulated_irregular_network)) (`.wkt`),\n>> [XDMF](https://xdmf.org/index.php/XDMF_Model_and_Format) (`.xdmf`, `.xmf`).\n\n## Contributing\n\nContributions are very welcome. Tests can be run with [tox], please ensure\nthe coverage at least stays the same before you submit a pull request.\n\n## License\n\nDistributed under the terms of the [MIT] license,\n\"napari-meshio\" is free and open source software\n\n## Issues\n\nIf you encounter any problems, please [file an issue] along with a detailed description.\n\n[napari]: https://github.com/napari/napari\n[Cookiecutter]: https://github.com/audreyr/cookiecutter\n[@napari]: https://github.com/napari\n[MIT]: http://opensource.org/licenses/MIT\n[BSD-3]: http://opensource.org/licenses/BSD-3-Clause\n[GNU GPL v3.0]: http://www.gnu.org/licenses/gpl-3.0.txt\n[GNU LGPL v3.0]: http://www.gnu.org/licenses/lgpl-3.0.txt\n[Apache Software License 2.0]: http://www.apache.org/licenses/LICENSE-2.0\n[Mozilla Public License 2.0]: https://www.mozilla.org/media/MPL/2.0/index.txt\n[cookiecutter-napari-plugin]: https://github.com/napari/cookiecutter-napari-plugin\n\n[file an issue]: https://github.com/GenevieveBuckley/napari-meshio/issues\n\n[napari]: https://github.com/napari/napari\n[tox]: https://tox.readthedocs.io/en/latest/\n[pip]: https://pypi.org/project/pip/\n[PyPI]: https://pypi.org/\n\n----------------------------------\n\nThis [napari] plugin was generated with [Cookiecutter] using [@napari]'s [cookiecutter-napari-plugin] template.\n",
    "description_content_type": "text/markdown",
    "keywords": null,
    "home_page": "https://github.com/GenevieveBuckley/napari-meshio",
    "download_url": null,
    "author": "Genevieve Buckley",
    "author_email": "yourname@example.com",
    "maintainer": null,
    "maintainer_email": null,
    "license": "MIT",
    "classifier": [
      "Development Status :: 2 - Pre-Alpha",
      "Framework :: napari",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: 3.10",
      "Topic :: Scientific/Engineering :: Image Processing"
    ],
    "requires_dist": [
      "numpy",
      "meshio",
      "pooch",
      "rich",
      "mkdocs ; extra == 'testing'",
      "mkdocs-gen-files ; extra == 'testing'",
      "napari ; extra == 'testing'",
      "tox ; extra == 'testing'",
      "pytest ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'"
    ],
    "requires_python": ">=3.8",
    "requires_external": null,
    "project_url": [
      "Bug Tracker, https://github.com/GenevieveBuckley/napari-meshio/issues",
      "Documentation, https://github.com/GenevieveBuckley/napari-meshio#README.md",
      "Source Code, https://github.com/GenevieveBuckley/napari-meshio",
      "User Support, https://github.com/GenevieveBuckley/napari-meshio/issues"
    ],
    "provides_extra": [
      "testing"
    ],
    "provides_dist": null,
    "obsoletes_dist": null
  },
  "npe1_shim": false
}