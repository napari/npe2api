{
  "name": "napari-orientationpy",
  "display_name": "Napari Orientationpy",
  "visibility": "public",
  "icon": "",
  "categories": [],
  "schema_version": "0.2.1",
  "on_activate": null,
  "on_deactivate": null,
  "contributions": {
    "commands": [
      {
        "id": "napari-orientationpy.pixels",
        "title": "Orientation measurement",
        "python_name": "napari_orientationpy:OrientationWidget",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      },
      {
        "id": "napari-orientationpy.distribution",
        "title": "Orientation distribution plot",
        "python_name": "napari_orientationpy:OrientationPlottingWidget",
        "short_title": null,
        "category": null,
        "icon": null,
        "enablement": null
      }
    ],
    "readers": null,
    "writers": null,
    "widgets": [
      {
        "command": "napari-orientationpy.pixels",
        "display_name": "Orientation measurement",
        "autogenerate": false
      },
      {
        "command": "napari-orientationpy.distribution",
        "display_name": "Orientation distribution (3D)",
        "autogenerate": false
      }
    ],
    "sample_data": [
      {
        "key": "bone",
        "display_name": "Bone tissue (2D)",
        "uri": "https://gitlab.com/epfl-center-for-imaging/orientationpy/-/raw/main/data/2D/image1_from_OrientationJ.tif",
        "reader_plugin": null
      },
      {
        "key": "fiber",
        "display_name": "Fibers (3D)",
        "uri": "https://gitlab.com/epfl-center-for-imaging/orientationpy/-/raw/main/data/3D/3dfib.tif",
        "reader_plugin": null
      }
    ],
    "themes": null,
    "menus": {},
    "submenus": null,
    "keybindings": null,
    "configuration": []
  },
  "package_metadata": {
    "metadata_version": "2.1",
    "name": "napari-orientationpy",
    "version": "0.0.7",
    "dynamic": null,
    "platform": null,
    "supported_platform": null,
    "summary": "Napari plugin for the Orientationpy project.",
    "description": "![EPFL Center for Imaging logo](https://imaging.epfl.ch/resources/logo-for-gitlab.svg)\n# napari-orientationpy\n\nAnalyze orientations in 2D, 3D, and RGB images in Napari. This plugin is based on the [Orientationpy](https://gitlab.com/epfl-center-for-imaging/orientationpy/) project.\n\n<p align=\"center\">\n    <img src=\"assets/ori_color-1.gif\" height=\"400\">\n</p>\n\n## Installation\n\nYou can install `napari-orientationpy` via [pip]:\n\n    pip install napari-orientationpy\n\n## Usage\nTo get started, open an image in the Napari viewer and start `napari-orientationpy` from the `Plugins` menu:\n\n```\nPlugins > Napari Orientationpy > Orientation measurement\n```\n\n1. **Select the structural scale parameter `sigma`**. This value control represents the scale at which the image gradients are computed. Try different values of `sigma` to understand what works best for your images. A reasonable guess would be the order in size, in pixels, of the structures that you are interested in. For example, if you are imaging fibers that appear to be about 4 pixels wide, try to set a value of *sigma=4*.\n\n<p align=\"center\">\n    <img src=\"assets/sigmas.png\" height=\"230\">\n</p>\n\n2. **If you are analyzing a 3D image, select `fiber` or `membrane` mode**. In `fiber` mode, the orientation normals follow fibrous structures. In `membrane` mode, the orientations are normal to the surface of membranous structures.\n\n3. **Decide which outputs you'd like to visualize.**\n  - The `color-coded orientation` is a pixel-wise representation of 3D orientations as colors (similar colors = similar orientations).\n  - The `orientation vectors` get rendered in a `Vectors` layer in Napari. They are sampled on a regular grid defined by the `Spacing (X)`, `Spacing (Y)` and `Spacing (Z)` values (for 2D images, the `Z` value is ignored). The length of the vectors can be rescaled based on the `energy` value of the orientation computation.\n  - You can also output the local `orientation gradient` (misorientation).\n\n4. **Compute orientation**. This button will trigger the orientation computation **only when necessary** (i.e. when the value of `sigma`, the `mode` or the `image` have changed). If you only adjust the `orientation vectors` parameters, clicking the compute button will update the results very fast.\n5. **Save orientation (CSV)**. This will save the orientation measurements as a CSV table with columns `X`, `Y`, `Z`, `theta`, `phi`, `energy`, and `coherency` for all the pixels in the image. \n\n### Plotting the 3D orientation distribution\n\nIf you have computed **orientation vectors** for a 3D image, you can plot their spatial distribution as a `stereographic projection` along the `X`, `Y` or `Z` direction directly in Napari. Select the widget from:\n\n```\nPlugins > Napari Orientationpy > Orientation distribution (3D)\n```\n<p align=\"center\">\n    <img src=\"assets/fibers_dist.png\" height=\"400\">\n</p>\n\n## Sample images\n\nWe provide a few sample images to test our plugin. Open them from:\n\n```\nFile > Open Sample > Napari Orientationpy\n```\n\n## Contributing\n\nContributions are very welcome. Please get in touch if you'd like to be involved in improving or extending the package.\n\n## License\n\nDistributed under the terms of the [BSD-3] license,\n\"napari-orientationpy\" is free and open source software\n\n## Issues\n\nIf you encounter any problems, please file an issue along with a detailed description.\n\n----------------------------------\n\n[napari]: https://github.com/napari/napari\n[BSD-3]: http://opensource.org/licenses/BSD-3-Clause\n[pip]: https://pypi.org/project/pip/\n",
    "description_content_type": "text/markdown",
    "keywords": null,
    "home_page": "https://github.com/EPFL-Center-for-Imaging/napari-orientationpy.git",
    "download_url": null,
    "author": "Mallory Wittwer",
    "author_email": "mallory.wittwer@epfl.ch",
    "maintainer": null,
    "maintainer_email": null,
    "license": "BSD-3-Clause",
    "classifier": [
      "Development Status :: 2 - Pre-Alpha",
      "Framework :: napari",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: 3.10",
      "Topic :: Scientific/Engineering :: Image Processing"
    ],
    "requires_dist": [
      "numpy",
      "magicgui",
      "qtpy",
      "napari[all] >=0.4.16",
      "orientationpy",
      "seaborn",
      "tox ; extra == 'testing'",
      "pytest ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'",
      "pytest-qt ; extra == 'testing'",
      "napari ; extra == 'testing'",
      "pyqt5 ; extra == 'testing'"
    ],
    "requires_python": ">=3.8",
    "requires_external": null,
    "project_url": null,
    "provides_extra": [
      "testing"
    ],
    "provides_dist": null,
    "obsoletes_dist": null
  },
  "npe1_shim": false
}